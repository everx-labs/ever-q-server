"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCacheEnabled = isCacheEnabled;
exports.MemjsDataCache = void 0;

var _memjs = require("memjs");

class MemjsDataCache {
  constructor(log, config) {
    this.log = log;
    this.memcached = new _memjs.Client.create(config.server, {
      logger: {
        log: () => {}
      },
      retries: 0,
      // don't retry
      expires: 0,
      // keepForever
      timeout: 0.1,
      // 100ms
      conntimeout: 0.2,
      // twice of timeout
      keepAlive: true,
      keepAliveDelay: 15
    });
  }

  async get(hashedKey) {
    return new Promise((resolve, reject) => {
      this.memcached.get(hashedKey, (err, data) => {
        if (!err) {
          try {
            const value = data ? JSON.parse(data.toString()) : null;
            this.log.debug('GET', hashedKey);
            resolve(value);
          } catch (e) {
            this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, e.message, data.toString()), resolve(null);
          }
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, err.message);
          resolve(null);
        }
      });
    });
  }

  async set(hashedKey, value) {
    return new Promise((resolve, reject) => {
      this.memcached.set(hashedKey, JSON.stringify(value), {}, err => {
        if (!err) {
          this.log.debug('SET', hashedKey);
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'SET', hashedKey, err.message);
        }

        resolve();
      });
    });
  }

}

exports.MemjsDataCache = MemjsDataCache;

function isCacheEnabled(config) {
  return config.server !== '';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZGF0YS9tZW1qcy1kYXRhY2FjaGUuanMiXSwibmFtZXMiOlsiTWVtanNEYXRhQ2FjaGUiLCJjb25zdHJ1Y3RvciIsImxvZyIsImNvbmZpZyIsIm1lbWNhY2hlZCIsIk1lbWNhY2hlZENsaWVudCIsImNyZWF0ZSIsInNlcnZlciIsImxvZ2dlciIsInJldHJpZXMiLCJleHBpcmVzIiwidGltZW91dCIsImNvbm50aW1lb3V0Iiwia2VlcEFsaXZlIiwia2VlcEFsaXZlRGVsYXkiLCJnZXQiLCJoYXNoZWRLZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsImRhdGEiLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwiZGVidWciLCJlIiwiZXJyb3IiLCJtZXNzYWdlIiwic2V0Iiwic3RyaW5naWZ5IiwiaXNDYWNoZUVuYWJsZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7O0FBS08sTUFBTUEsY0FBTixDQUEyQztBQUk5Q0MsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQVlDLE1BQVosRUFBc0M7QUFDN0MsU0FBS0QsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0UsU0FBTCxHQUFpQixJQUFJQyxjQUFnQkMsTUFBcEIsQ0FBMkJILE1BQU0sQ0FBQ0ksTUFBbEMsRUFBMEM7QUFDdkRDLE1BQUFBLE1BQU0sRUFBRTtBQUFFTixRQUFBQSxHQUFHLEVBQUUsTUFBTSxDQUFFO0FBQWYsT0FEK0M7QUFFdkRPLE1BQUFBLE9BQU8sRUFBRSxDQUY4QztBQUUzQztBQUNaQyxNQUFBQSxPQUFPLEVBQUUsQ0FIOEM7QUFHM0M7QUFDWkMsTUFBQUEsT0FBTyxFQUFFLEdBSjhDO0FBSXpDO0FBQ2RDLE1BQUFBLFdBQVcsRUFBRSxHQUwwQztBQUtyQztBQUNsQkMsTUFBQUEsU0FBUyxFQUFFLElBTjRDO0FBT3ZEQyxNQUFBQSxjQUFjLEVBQUU7QUFQdUMsS0FBMUMsQ0FBakI7QUFTSDs7QUFFRCxRQUFNQyxHQUFOLENBQVVDLFNBQVYsRUFBMkM7QUFDdkMsV0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDLFdBQUtmLFNBQUwsQ0FBZVcsR0FBZixDQUFtQkMsU0FBbkIsRUFBOEIsQ0FBQ0ksR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDekMsWUFBSSxDQUFDRCxHQUFMLEVBQVU7QUFDTixjQUFJO0FBQ0Esa0JBQU1FLEtBQUssR0FBR0QsSUFBSSxHQUFHRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsSUFBSSxDQUFDSSxRQUFMLEVBQVgsQ0FBSCxHQUFpQyxJQUFuRDtBQUNBLGlCQUFLdkIsR0FBTCxDQUFTd0IsS0FBVCxDQUFlLEtBQWYsRUFBc0JWLFNBQXRCO0FBQ0FFLFlBQUFBLE9BQU8sQ0FBQ0ksS0FBRCxDQUFQO0FBQ0gsV0FKRCxDQUlFLE9BQU9LLENBQVAsRUFBVTtBQUNSLGlCQUFLekIsR0FBTCxDQUFTMEIsS0FBVCxDQUFlLFFBQWYsRUFBeUIsV0FBekIsRUFBc0MsS0FBdEMsRUFBNkNaLFNBQTdDLEVBQXdEVyxDQUFDLENBQUNFLE9BQTFELEVBQW1FUixJQUFJLENBQUNJLFFBQUwsRUFBbkUsR0FDQVAsT0FBTyxDQUFDLElBQUQsQ0FEUDtBQUVIO0FBQ0osU0FURCxNQVNPO0FBQ0gsZUFBS2hCLEdBQUwsQ0FBUzBCLEtBQVQsQ0FBZSxRQUFmLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLEVBQTZDWixTQUE3QyxFQUF3REksR0FBRyxDQUFDUyxPQUE1RDtBQUNBWCxVQUFBQSxPQUFPLENBQUMsSUFBRCxDQUFQO0FBQ0g7QUFDSixPQWREO0FBZUgsS0FoQk0sQ0FBUDtBQWlCSDs7QUFFRCxRQUFNWSxHQUFOLENBQVVkLFNBQVYsRUFBNkJNLEtBQTdCLEVBQXdEO0FBQ3BELFdBQU8sSUFBSUwsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxXQUFLZixTQUFMLENBQWUwQixHQUFmLENBQW1CZCxTQUFuQixFQUE4Qk8sSUFBSSxDQUFDUSxTQUFMLENBQWVULEtBQWYsQ0FBOUIsRUFBcUQsRUFBckQsRUFBMERGLEdBQUQsSUFBUztBQUM5RCxZQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNOLGVBQUtsQixHQUFMLENBQVN3QixLQUFULENBQWUsS0FBZixFQUFzQlYsU0FBdEI7QUFDSCxTQUZELE1BRU87QUFDSCxlQUFLZCxHQUFMLENBQVMwQixLQUFULENBQWUsUUFBZixFQUF5QixXQUF6QixFQUFzQyxLQUF0QyxFQUE2Q1osU0FBN0MsRUFBd0RJLEdBQUcsQ0FBQ1MsT0FBNUQ7QUFDSDs7QUFDRFgsUUFBQUEsT0FBTztBQUNWLE9BUEQ7QUFRSCxLQVRNLENBQVA7QUFVSDs7QUFoRDZDOzs7O0FBbUQzQyxTQUFTYyxjQUFULENBQXdCN0IsTUFBeEIsRUFBa0Q7QUFDckQsU0FBT0EsTUFBTSxDQUFDSSxNQUFQLEtBQWtCLEVBQXpCO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBDbGllbnQgYXMgTWVtY2FjaGVkQ2xpZW50IH0gZnJvbSAnbWVtanMnXG5pbXBvcnQgdHlwZSB7IFFNZW1DYWNoZWRDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi4vbG9ncyc7XG5pbXBvcnQgdHlwZSB7IFFEYXRhQ2FjaGUgfSBmcm9tICcuL2RhdGEtcHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgTWVtanNEYXRhQ2FjaGUgaW1wbGVtZW50cyBRRGF0YUNhY2hlIHtcbiAgICBtZW1jYWNoZWQ6IE1lbWNhY2hlZENsaWVudDtcbiAgICBsb2c6IFFMb2c7XG5cbiAgICBjb25zdHJ1Y3Rvcihsb2c6IFFMb2csIGNvbmZpZzogUU1lbUNhY2hlZENvbmZpZykge1xuICAgICAgICB0aGlzLmxvZyA9IGxvZztcbiAgICAgICAgdGhpcy5tZW1jYWNoZWQgPSBuZXcgTWVtY2FjaGVkQ2xpZW50LmNyZWF0ZShjb25maWcuc2VydmVyLCB7XG4gICAgICAgICAgICBsb2dnZXI6IHsgbG9nOiAoKSA9PiB7fSB9LFxuICAgICAgICAgICAgcmV0cmllczogMCwgLy8gZG9uJ3QgcmV0cnlcbiAgICAgICAgICAgIGV4cGlyZXM6IDAsIC8vIGtlZXBGb3JldmVyXG4gICAgICAgICAgICB0aW1lb3V0OiAwLjEsIC8vIDEwMG1zXG4gICAgICAgICAgICBjb25udGltZW91dDogMC4yLCAvLyB0d2ljZSBvZiB0aW1lb3V0XG4gICAgICAgICAgICBrZWVwQWxpdmU6IHRydWUsXG4gICAgICAgICAgICBrZWVwQWxpdmVEZWxheTogMTVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXQoaGFzaGVkS2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tZW1jYWNoZWQuZ2V0KGhhc2hlZEtleSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEgPyBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0dFVCcsIGhhc2hlZEtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTUVNQ0FDSEVEJywgJ0dFVCcsIGhhc2hlZEtleSwgZS5tZXNzYWdlLCBkYXRhLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTUVNQ0FDSEVEJywgJ0dFVCcsIGhhc2hlZEtleSwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYXN5bmMgc2V0KGhhc2hlZEtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lbWNhY2hlZC5zZXQoaGFzaGVkS2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIHt9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ1NFVCcsIGhhc2hlZEtleSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignRkFJTEVEJywgJ01FTUNBQ0hFRCcsICdTRVQnLCBoYXNoZWRLZXksIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FjaGVFbmFibGVkKGNvbmZpZzogUU1lbUNhY2hlZENvbmZpZykge1xuICAgIHJldHVybiBjb25maWcuc2VydmVyICE9PSAnJztcbn1cbiJdfQ==