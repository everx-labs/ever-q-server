"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCacheEnabled = isCacheEnabled;
exports.MemjsDataCache = void 0;

var _crypto = require("crypto");

var _memjs = require("memjs");

class MemjsDataCache {
  constructor(log, config) {
    this.log = log;
    this.memcached = new _memjs.Client.create(config.server, {
      logger: {
        log: () => {}
      },
      retries: 0,
      // don't retry
      expires: 0,
      // keepForever
      timeout: 0.1,
      // 100ms
      conntimeout: 0.2,
      // twice of timeout
      keepAlive: true,
      keepAliveDelay: 15
    });
  }

  get(key) {
    const hashedKey = (0, _crypto.createHash)('md5').update(key).digest("hex");
    return new Promise((resolve, reject) => {
      this.memcached.get(hashedKey, (err, data) => {
        if (!err) {
          try {
            const value = data ? JSON.parse(data.toString()) : null;
            this.log.debug('GET', hashedKey);
            resolve(value);
          } catch (e) {
            this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, e.message, data.toString()), resolve(null);
          }
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, err.message);
          resolve(null);
        }
      });
    });
  }

  set(key, value) {
    const hashedKey = (0, _crypto.createHash)('md5').update(key).digest("hex");
    return new Promise((resolve, reject) => {
      this.memcached.set(hashedKey, JSON.stringify(value), {}, err => {
        if (!err) {
          this.log.debug('SET', hashedKey);
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'SET', hashedKey, err.message);
        }

        resolve();
      });
    });
  }

}

exports.MemjsDataCache = MemjsDataCache;

function isCacheEnabled(config) {
  return config.server !== '';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZGF0YS9tZW1qcy1kYXRhY2FjaGUuanMiXSwibmFtZXMiOlsiTWVtanNEYXRhQ2FjaGUiLCJjb25zdHJ1Y3RvciIsImxvZyIsImNvbmZpZyIsIm1lbWNhY2hlZCIsIk1lbWNhY2hlZENsaWVudCIsImNyZWF0ZSIsInNlcnZlciIsImxvZ2dlciIsInJldHJpZXMiLCJleHBpcmVzIiwidGltZW91dCIsImNvbm50aW1lb3V0Iiwia2VlcEFsaXZlIiwia2VlcEFsaXZlRGVsYXkiLCJnZXQiLCJrZXkiLCJoYXNoZWRLZXkiLCJ1cGRhdGUiLCJkaWdlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsImRhdGEiLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwiZGVidWciLCJlIiwiZXJyb3IiLCJtZXNzYWdlIiwic2V0Iiwic3RyaW5naWZ5IiwiaXNDYWNoZUVuYWJsZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBS08sTUFBTUEsY0FBTixDQUEyQztBQUk5Q0MsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQVlDLE1BQVosRUFBc0M7QUFDN0MsU0FBS0QsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0UsU0FBTCxHQUFpQixJQUFJQyxjQUFnQkMsTUFBcEIsQ0FBMkJILE1BQU0sQ0FBQ0ksTUFBbEMsRUFBMEM7QUFDdkRDLE1BQUFBLE1BQU0sRUFBRTtBQUFFTixRQUFBQSxHQUFHLEVBQUUsTUFBTSxDQUFFO0FBQWYsT0FEK0M7QUFFdkRPLE1BQUFBLE9BQU8sRUFBRSxDQUY4QztBQUUzQztBQUNaQyxNQUFBQSxPQUFPLEVBQUUsQ0FIOEM7QUFHM0M7QUFDWkMsTUFBQUEsT0FBTyxFQUFFLEdBSjhDO0FBSXpDO0FBQ2RDLE1BQUFBLFdBQVcsRUFBRSxHQUwwQztBQUtyQztBQUNsQkMsTUFBQUEsU0FBUyxFQUFFLElBTjRDO0FBT3ZEQyxNQUFBQSxjQUFjLEVBQUU7QUFQdUMsS0FBMUMsQ0FBakI7QUFTSDs7QUFFREMsRUFBQUEsR0FBRyxDQUFDQyxHQUFELEVBQTRCO0FBQzNCLFVBQU1DLFNBQVMsR0FBRyx3QkFBVyxLQUFYLEVBQWtCQyxNQUFsQixDQUF5QkYsR0FBekIsRUFBOEJHLE1BQTlCLENBQXFDLEtBQXJDLENBQWxCO0FBQ0EsV0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDLFdBQUtsQixTQUFMLENBQWVXLEdBQWYsQ0FBbUJFLFNBQW5CLEVBQThCLENBQUNNLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3pDLFlBQUksQ0FBQ0QsR0FBTCxFQUFVO0FBQ04sY0FBSTtBQUNBLGtCQUFNRSxLQUFLLEdBQUdELElBQUksR0FBR0UsSUFBSSxDQUFDQyxLQUFMLENBQVdILElBQUksQ0FBQ0ksUUFBTCxFQUFYLENBQUgsR0FBaUMsSUFBbkQ7QUFDQSxpQkFBSzFCLEdBQUwsQ0FBUzJCLEtBQVQsQ0FBZSxLQUFmLEVBQXNCWixTQUF0QjtBQUNBSSxZQUFBQSxPQUFPLENBQUNJLEtBQUQsQ0FBUDtBQUNILFdBSkQsQ0FJRSxPQUFPSyxDQUFQLEVBQVU7QUFDUixpQkFBSzVCLEdBQUwsQ0FBUzZCLEtBQVQsQ0FBZSxRQUFmLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLEVBQTZDZCxTQUE3QyxFQUF3RGEsQ0FBQyxDQUFDRSxPQUExRCxFQUFtRVIsSUFBSSxDQUFDSSxRQUFMLEVBQW5FLEdBQ0FQLE9BQU8sQ0FBQyxJQUFELENBRFA7QUFFSDtBQUNKLFNBVEQsTUFTTztBQUNILGVBQUtuQixHQUFMLENBQVM2QixLQUFULENBQWUsUUFBZixFQUF5QixXQUF6QixFQUFzQyxLQUF0QyxFQUE2Q2QsU0FBN0MsRUFBd0RNLEdBQUcsQ0FBQ1MsT0FBNUQ7QUFDQVgsVUFBQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNIO0FBQ0osT0FkRDtBQWVILEtBaEJNLENBQVA7QUFpQkg7O0FBRURZLEVBQUFBLEdBQUcsQ0FBQ2pCLEdBQUQsRUFBY1MsS0FBZCxFQUF5QztBQUN4QyxVQUFNUixTQUFTLEdBQUcsd0JBQVcsS0FBWCxFQUFrQkMsTUFBbEIsQ0FBeUJGLEdBQXpCLEVBQThCRyxNQUE5QixDQUFxQyxLQUFyQyxDQUFsQjtBQUNBLFdBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxXQUFLbEIsU0FBTCxDQUFlNkIsR0FBZixDQUFtQmhCLFNBQW5CLEVBQThCUyxJQUFJLENBQUNRLFNBQUwsQ0FBZVQsS0FBZixDQUE5QixFQUFxRCxFQUFyRCxFQUEwREYsR0FBRCxJQUFTO0FBQzlELFlBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ04sZUFBS3JCLEdBQUwsQ0FBUzJCLEtBQVQsQ0FBZSxLQUFmLEVBQXNCWixTQUF0QjtBQUNILFNBRkQsTUFFTztBQUNILGVBQUtmLEdBQUwsQ0FBUzZCLEtBQVQsQ0FBZSxRQUFmLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLEVBQTZDZCxTQUE3QyxFQUF3RE0sR0FBRyxDQUFDUyxPQUE1RDtBQUNIOztBQUNEWCxRQUFBQSxPQUFPO0FBQ1YsT0FQRDtBQVFILEtBVE0sQ0FBUDtBQVVIOztBQWxENkM7Ozs7QUFxRDNDLFNBQVNjLGNBQVQsQ0FBd0JoQyxNQUF4QixFQUFrRDtBQUNyRCxTQUFPQSxNQUFNLENBQUNJLE1BQVAsS0FBa0IsRUFBekI7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgeyBDbGllbnQgYXMgTWVtY2FjaGVkQ2xpZW50IH0gZnJvbSAnbWVtanMnXG5pbXBvcnQgdHlwZSB7IFFNZW1DYWNoZWRDb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBRTG9nIH0gZnJvbSAnLi4vbG9ncyc7XG5pbXBvcnQgdHlwZSB7IFFEYXRhQ2FjaGUgfSBmcm9tICcuL2RhdGEtcHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgTWVtanNEYXRhQ2FjaGUgaW1wbGVtZW50cyBRRGF0YUNhY2hlIHtcbiAgICBtZW1jYWNoZWQ6IE1lbWNhY2hlZENsaWVudDtcbiAgICBsb2c6IFFMb2c7XG5cbiAgICBjb25zdHJ1Y3Rvcihsb2c6IFFMb2csIGNvbmZpZzogUU1lbUNhY2hlZENvbmZpZykge1xuICAgICAgICB0aGlzLmxvZyA9IGxvZztcbiAgICAgICAgdGhpcy5tZW1jYWNoZWQgPSBuZXcgTWVtY2FjaGVkQ2xpZW50LmNyZWF0ZShjb25maWcuc2VydmVyLCB7XG4gICAgICAgICAgICBsb2dnZXI6IHsgbG9nOiAoKSA9PiB7fSB9LFxuICAgICAgICAgICAgcmV0cmllczogMCwgLy8gZG9uJ3QgcmV0cnlcbiAgICAgICAgICAgIGV4cGlyZXM6IDAsIC8vIGtlZXBGb3JldmVyXG4gICAgICAgICAgICB0aW1lb3V0OiAwLjEsIC8vIDEwMG1zXG4gICAgICAgICAgICBjb25udGltZW91dDogMC4yLCAvLyB0d2ljZSBvZiB0aW1lb3V0XG4gICAgICAgICAgICBrZWVwQWxpdmU6IHRydWUsXG4gICAgICAgICAgICBrZWVwQWxpdmVEZWxheTogMTVcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBoYXNoZWRLZXkgPSBjcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoa2V5KS5kaWdlc3QoXCJoZXhcIik7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lbWNhY2hlZC5nZXQoaGFzaGVkS2V5LCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YSA/IEpTT04ucGFyc2UoZGF0YS50b1N0cmluZygpKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnR0VUJywgaGFzaGVkS2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoJ0ZBSUxFRCcsICdNRU1DQUNIRUQnLCAnR0VUJywgaGFzaGVkS2V5LCBlLm1lc3NhZ2UsIGRhdGEudG9TdHJpbmcoKSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTUVNQ0FDSEVEJywgJ0dFVCcsIGhhc2hlZEtleSwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGhhc2hlZEtleSA9IGNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShrZXkpLmRpZ2VzdChcImhleFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVtY2FjaGVkLnNldChoYXNoZWRLZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwge30sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnU0VUJywgaGFzaGVkS2V5KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTUVNQ0FDSEVEJywgJ1NFVCcsIGhhc2hlZEtleSwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYWNoZUVuYWJsZWQoY29uZmlnOiBRTWVtQ2FjaGVkQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5zZXJ2ZXIgIT09ICcnO1xufVxuIl19