"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemjsDataCache = void 0;

var _crypto = require("crypto");

var _memjs = require("memjs");

class MemjsDataCache {
  constructor(log, config) {
    this.log = log;
    this.memcached = new _memjs.Client.create(config.server, {
      logger: {
        log: () => {}
      },
      retries: 0,
      // don't retry
      expires: 0,
      // keepForever
      timeout: 0.1,
      // 100ms
      conntimeout: 0.2,
      // twice of timeout
      keepAlive: true,
      keepAliveDelay: 15
    });
  }

  get(key) {
    const hashedKey = (0, _crypto.createHash)('md5').update(key).digest("hex");
    return new Promise((resolve, reject) => {
      this.memcached.get(hashedKey, (err, data) => {
        if (!err) {
          try {
            const value = data ? JSON.parse(data.toString()) : null;
            this.log.debug('GET', hashedKey);
            resolve(value);
          } catch (e) {
            this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, e.message, data.toString()), resolve(null);
          }
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'GET', hashedKey, err.message);
          resolve(null);
        }
      });
    });
  }

  set(key, value) {
    const hashedKey = (0, _crypto.createHash)('md5').update(key).digest("hex");
    return new Promise((resolve, reject) => {
      this.memcached.set(hashedKey, JSON.stringify(value), {}, err => {
        if (!err) {
          this.log.debug('SET', hashedKey);
        } else {
          this.log.error('FAILED', 'MEMCACHED', 'SET', hashedKey, err.message);
        }

        resolve();
      });
    });
  }

}

exports.MemjsDataCache = MemjsDataCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZGF0YS9tZW1qcy1kYXRhY2FjaGUuanMiXSwibmFtZXMiOlsiTWVtanNEYXRhQ2FjaGUiLCJjb25zdHJ1Y3RvciIsImxvZyIsImNvbmZpZyIsIm1lbWNhY2hlZCIsIk1lbWNhY2hlZENsaWVudCIsImNyZWF0ZSIsInNlcnZlciIsImxvZ2dlciIsInJldHJpZXMiLCJleHBpcmVzIiwidGltZW91dCIsImNvbm50aW1lb3V0Iiwia2VlcEFsaXZlIiwia2VlcEFsaXZlRGVsYXkiLCJnZXQiLCJrZXkiLCJoYXNoZWRLZXkiLCJ1cGRhdGUiLCJkaWdlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsImRhdGEiLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwiZGVidWciLCJlIiwiZXJyb3IiLCJtZXNzYWdlIiwic2V0Iiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBS08sTUFBTUEsY0FBTixDQUEyQztBQUk5Q0MsRUFBQUEsV0FBVyxDQUFDQyxHQUFELEVBQVlDLE1BQVosRUFBc0M7QUFDN0MsU0FBS0QsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0UsU0FBTCxHQUFpQixJQUFJQyxjQUFnQkMsTUFBcEIsQ0FBMkJILE1BQU0sQ0FBQ0ksTUFBbEMsRUFBMEM7QUFDdkRDLE1BQUFBLE1BQU0sRUFBRTtBQUFFTixRQUFBQSxHQUFHLEVBQUUsTUFBTSxDQUFFO0FBQWYsT0FEK0M7QUFFdkRPLE1BQUFBLE9BQU8sRUFBRSxDQUY4QztBQUUzQztBQUNaQyxNQUFBQSxPQUFPLEVBQUUsQ0FIOEM7QUFHM0M7QUFDWkMsTUFBQUEsT0FBTyxFQUFFLEdBSjhDO0FBSXpDO0FBQ2RDLE1BQUFBLFdBQVcsRUFBRSxHQUwwQztBQUtyQztBQUNsQkMsTUFBQUEsU0FBUyxFQUFFLElBTjRDO0FBT3ZEQyxNQUFBQSxjQUFjLEVBQUU7QUFQdUMsS0FBMUMsQ0FBakI7QUFTSDs7QUFFREMsRUFBQUEsR0FBRyxDQUFDQyxHQUFELEVBQTRCO0FBQzNCLFVBQU1DLFNBQVMsR0FBRyx3QkFBVyxLQUFYLEVBQWtCQyxNQUFsQixDQUF5QkYsR0FBekIsRUFBOEJHLE1BQTlCLENBQXFDLEtBQXJDLENBQWxCO0FBQ0EsV0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDLFdBQUtsQixTQUFMLENBQWVXLEdBQWYsQ0FBbUJFLFNBQW5CLEVBQThCLENBQUNNLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3pDLFlBQUksQ0FBQ0QsR0FBTCxFQUFVO0FBQ04sY0FBSTtBQUNBLGtCQUFNRSxLQUFLLEdBQUdELElBQUksR0FBR0UsSUFBSSxDQUFDQyxLQUFMLENBQVdILElBQUksQ0FBQ0ksUUFBTCxFQUFYLENBQUgsR0FBaUMsSUFBbkQ7QUFDQSxpQkFBSzFCLEdBQUwsQ0FBUzJCLEtBQVQsQ0FBZSxLQUFmLEVBQXNCWixTQUF0QjtBQUNBSSxZQUFBQSxPQUFPLENBQUNJLEtBQUQsQ0FBUDtBQUNILFdBSkQsQ0FJRSxPQUFPSyxDQUFQLEVBQVU7QUFDUixpQkFBSzVCLEdBQUwsQ0FBUzZCLEtBQVQsQ0FBZSxRQUFmLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLEVBQTZDZCxTQUE3QyxFQUF3RGEsQ0FBQyxDQUFDRSxPQUExRCxFQUFtRVIsSUFBSSxDQUFDSSxRQUFMLEVBQW5FLEdBQ0FQLE9BQU8sQ0FBQyxJQUFELENBRFA7QUFFSDtBQUNKLFNBVEQsTUFTTztBQUNILGVBQUtuQixHQUFMLENBQVM2QixLQUFULENBQWUsUUFBZixFQUF5QixXQUF6QixFQUFzQyxLQUF0QyxFQUE2Q2QsU0FBN0MsRUFBd0RNLEdBQUcsQ0FBQ1MsT0FBNUQ7QUFDQVgsVUFBQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNIO0FBQ0osT0FkRDtBQWVILEtBaEJNLENBQVA7QUFpQkg7O0FBRURZLEVBQUFBLEdBQUcsQ0FBQ2pCLEdBQUQsRUFBY1MsS0FBZCxFQUF5QztBQUN4QyxVQUFNUixTQUFTLEdBQUcsd0JBQVcsS0FBWCxFQUFrQkMsTUFBbEIsQ0FBeUJGLEdBQXpCLEVBQThCRyxNQUE5QixDQUFxQyxLQUFyQyxDQUFsQjtBQUNBLFdBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxXQUFLbEIsU0FBTCxDQUFlNkIsR0FBZixDQUFtQmhCLFNBQW5CLEVBQThCUyxJQUFJLENBQUNRLFNBQUwsQ0FBZVQsS0FBZixDQUE5QixFQUFxRCxFQUFyRCxFQUEwREYsR0FBRCxJQUFTO0FBQzlELFlBQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ04sZUFBS3JCLEdBQUwsQ0FBUzJCLEtBQVQsQ0FBZSxLQUFmLEVBQXNCWixTQUF0QjtBQUNILFNBRkQsTUFFTztBQUNILGVBQUtmLEdBQUwsQ0FBUzZCLEtBQVQsQ0FBZSxRQUFmLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLEVBQTZDZCxTQUE3QyxFQUF3RE0sR0FBRyxDQUFDUyxPQUE1RDtBQUNIOztBQUNEWCxRQUFBQSxPQUFPO0FBQ1YsT0FQRDtBQVFILEtBVE0sQ0FBUDtBQVVIOztBQWxENkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgQ2xpZW50IGFzIE1lbWNhY2hlZENsaWVudCB9IGZyb20gJ21lbWpzJ1xuaW1wb3J0IHR5cGUgeyBRTWVtQ2FjaGVkQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB0eXBlIHsgUUxvZyB9IGZyb20gJy4uL2xvZ3MnO1xuaW1wb3J0IHR5cGUgeyBRRGF0YUNhY2hlIH0gZnJvbSAnLi9kYXRhLXByb3ZpZGVyJztcblxuZXhwb3J0IGNsYXNzIE1lbWpzRGF0YUNhY2hlIGltcGxlbWVudHMgUURhdGFDYWNoZSB7XG4gICAgbWVtY2FjaGVkOiBNZW1jYWNoZWRDbGllbnQ7XG4gICAgbG9nOiBRTG9nO1xuXG4gICAgY29uc3RydWN0b3IobG9nOiBRTG9nLCBjb25maWc6IFFNZW1DYWNoZWRDb25maWcpIHtcbiAgICAgICAgdGhpcy5sb2cgPSBsb2c7XG4gICAgICAgIHRoaXMubWVtY2FjaGVkID0gbmV3IE1lbWNhY2hlZENsaWVudC5jcmVhdGUoY29uZmlnLnNlcnZlciwge1xuICAgICAgICAgICAgbG9nZ2VyOiB7IGxvZzogKCkgPT4ge30gfSxcbiAgICAgICAgICAgIHJldHJpZXM6IDAsIC8vIGRvbid0IHJldHJ5XG4gICAgICAgICAgICBleHBpcmVzOiAwLCAvLyBrZWVwRm9yZXZlclxuICAgICAgICAgICAgdGltZW91dDogMC4xLCAvLyAxMDBtc1xuICAgICAgICAgICAgY29ubnRpbWVvdXQ6IDAuMiwgLy8gdHdpY2Ugb2YgdGltZW91dFxuICAgICAgICAgICAga2VlcEFsaXZlOiB0cnVlLFxuICAgICAgICAgICAga2VlcEFsaXZlRGVsYXk6IDE1XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgaGFzaGVkS2V5ID0gY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKGtleSkuZGlnZXN0KFwiaGV4XCIpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tZW1jYWNoZWQuZ2V0KGhhc2hlZEtleSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEgPyBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0dFVCcsIGhhc2hlZEtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdGQUlMRUQnLCAnTUVNQ0FDSEVEJywgJ0dFVCcsIGhhc2hlZEtleSwgZS5tZXNzYWdlLCBkYXRhLnRvU3RyaW5nKCkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignRkFJTEVEJywgJ01FTUNBQ0hFRCcsICdHRVQnLCBoYXNoZWRLZXksIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBoYXNoZWRLZXkgPSBjcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoa2V5KS5kaWdlc3QoXCJoZXhcIik7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lbWNhY2hlZC5zZXQoaGFzaGVkS2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIHt9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ1NFVCcsIGhhc2hlZEtleSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5lcnJvcignRkFJTEVEJywgJ01FTUNBQ0hFRCcsICdTRVQnLCBoYXNoZWRLZXksIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbiJdfQ==