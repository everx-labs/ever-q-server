"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolversMam = void 0;

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  version
} = (0, _utils.packageJson)();

// Query
function info() {
  return {
    version
  };
}

function stat(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = db.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  const db = context.db;
  const collections = [];

  for (const collection of db.collections) {
    const indexes = [];
    const dbCollection = collection.dbCollection();

    for (const index of await dbCollection.indexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: (await dbCollection.count()).count,
      indexes
    });
  }

  return collections;
}

async function dropCachedDbInfo(_parent, args, context) {
  (0, _arangoCollection.mamAccessRequired)(context, args);
  context.db.dropCachedDbInfo();
  return true;
} // Mutation


const resolversMam = {
  Query: {
    info,
    getCollections,
    stat
  },
  Mutation: {
    dropCachedDbInfo
  }
};
exports.resolversMam = resolversMam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9yZXNvbHZlcnMtbWFtLmpzIl0sIm5hbWVzIjpbInZlcnNpb24iLCJpbmZvIiwic3RhdCIsIl9wYXJlbnQiLCJhcmdzIiwiY29udGV4dCIsImRiIiwidG90YWxXYWl0Rm9yQ291bnQiLCJ0b3RhbFN1YnNjcmlwdGlvbkNvdW50IiwiY29sbGVjdGlvbnMiLCJtYXAiLCJjb2xsZWN0aW9uIiwid2FpdEZvckNvdW50Iiwic3Vic2NyaXB0aW9uQ291bnQiLCJuYW1lIiwibWF4UXVldWVTaXplIiwic3Vic2NyaXB0aW9ucyIsIndhaXRGb3IiLCJnZXRDb2xsZWN0aW9ucyIsImluZGV4ZXMiLCJkYkNvbGxlY3Rpb24iLCJpbmRleCIsInB1c2giLCJmaWVsZHMiLCJqb2luIiwiY291bnQiLCJkcm9wQ2FjaGVkRGJJbmZvIiwicmVzb2x2ZXJzTWFtIiwiUXVlcnkiLCJNdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUVBOzs7O0FBQ0EsTUFBTTtBQUFDQSxFQUFBQTtBQUFELElBQVkseUJBQWxCOztBQWlDQTtBQUVBLFNBQVNDLElBQVQsR0FBc0I7QUFDbEIsU0FBTztBQUNIRCxJQUFBQTtBQURHLEdBQVA7QUFHSDs7QUFFRCxTQUFTRSxJQUFULENBQWNDLE9BQWQsRUFBNEJDLElBQTVCLEVBQXVDQyxPQUF2QyxFQUErRTtBQUMzRSwyQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLEVBQVUsR0FBR0QsT0FBTyxDQUFDQyxFQUEzQjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLENBQXhCO0FBQ0EsTUFBSUMsc0JBQXNCLEdBQUcsQ0FBN0I7QUFDQSxRQUFNQyxXQUFXLEdBQUdILEVBQUUsQ0FBQ0csV0FBSCxDQUFlQyxHQUFmLENBQW9CQyxVQUFELElBQTRCO0FBQy9ESixJQUFBQSxpQkFBaUIsSUFBSUksVUFBVSxDQUFDQyxZQUFoQztBQUNBSixJQUFBQSxzQkFBc0IsSUFBSUcsVUFBVSxDQUFDRSxpQkFBckM7QUFDQSxXQUFPO0FBQ0hDLE1BQUFBLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQURkO0FBRUhELE1BQUFBLGlCQUFpQixFQUFFRixVQUFVLENBQUNFLGlCQUYzQjtBQUdIRCxNQUFBQSxZQUFZLEVBQUVELFVBQVUsQ0FBQ0MsWUFIdEI7QUFJSEcsTUFBQUEsWUFBWSxFQUFFSixVQUFVLENBQUNJLFlBSnRCO0FBS0hDLE1BQUFBLGFBQWEsRUFBRSxFQUxaO0FBTUhDLE1BQUFBLE9BQU8sRUFBRTtBQU5OLEtBQVA7QUFRSCxHQVhtQixDQUFwQjtBQVlBLFNBQU87QUFDSEwsSUFBQUEsWUFBWSxFQUFFTCxpQkFEWDtBQUVITSxJQUFBQSxpQkFBaUIsRUFBRUwsc0JBRmhCO0FBR0hDLElBQUFBO0FBSEcsR0FBUDtBQUtIOztBQUVELGVBQWVTLGNBQWYsQ0FBOEJmLE9BQTlCLEVBQTRDQyxJQUE1QyxFQUF1REMsT0FBdkQsRUFBdUg7QUFDbkgsMkNBQWtCQSxPQUFsQixFQUEyQkQsSUFBM0I7QUFDQSxRQUFNRSxFQUFVLEdBQUdELE9BQU8sQ0FBQ0MsRUFBM0I7QUFDQSxRQUFNRyxXQUFnQyxHQUFHLEVBQXpDOztBQUNBLE9BQUssTUFBTUUsVUFBWCxJQUF5QkwsRUFBRSxDQUFDRyxXQUE1QixFQUF5QztBQUNyQyxVQUFNVSxPQUFpQixHQUFHLEVBQTFCO0FBQ0EsVUFBTUMsWUFBWSxHQUFHVCxVQUFVLENBQUNTLFlBQVgsRUFBckI7O0FBQ0EsU0FBSyxNQUFNQyxLQUFYLElBQW9CLE1BQU1ELFlBQVksQ0FBQ0QsT0FBYixFQUExQixFQUFrRDtBQUM5Q0EsTUFBQUEsT0FBTyxDQUFDRyxJQUFSLENBQWFELEtBQUssQ0FBQ0UsTUFBTixDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQWI7QUFDSDs7QUFDRGYsSUFBQUEsV0FBVyxDQUFDYSxJQUFaLENBQWlCO0FBQ2JSLE1BQUFBLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQURKO0FBRWJXLE1BQUFBLEtBQUssRUFBRSxDQUFDLE1BQU1MLFlBQVksQ0FBQ0ssS0FBYixFQUFQLEVBQTZCQSxLQUZ2QjtBQUdiTixNQUFBQTtBQUhhLEtBQWpCO0FBS0g7O0FBQ0QsU0FBT1YsV0FBUDtBQUNIOztBQUVELGVBQWVpQixnQkFBZixDQUFnQ3ZCLE9BQWhDLEVBQThDQyxJQUE5QyxFQUF5REMsT0FBekQsRUFBNkc7QUFDekcsMkNBQWtCQSxPQUFsQixFQUEyQkQsSUFBM0I7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxFQUFSLENBQVdvQixnQkFBWDtBQUNBLFNBQU8sSUFBUDtBQUNILEMsQ0FFRDs7O0FBRU8sTUFBTUMsWUFBWSxHQUFHO0FBQ3hCQyxFQUFBQSxLQUFLLEVBQUU7QUFDSDNCLElBQUFBLElBREc7QUFFSGlCLElBQUFBLGNBRkc7QUFHSGhCLElBQUFBO0FBSEcsR0FEaUI7QUFNeEIyQixFQUFBQSxRQUFRLEVBQUU7QUFDTkgsSUFBQUE7QUFETTtBQU5jLENBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCBBcmFuZ28gZnJvbSBcIi4vYXJhbmdvXCI7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24sIG1hbUFjY2Vzc1JlcXVpcmVkIH0gZnJvbSBcIi4vYXJhbmdvLWNvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHR5cGUgeyBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCB9IGZyb20gXCIuL3Jlc29sdmVycy1jdXN0b21cIjtcclxuaW1wb3J0IHtwYWNrYWdlSnNvbn0gZnJvbSAnLi91dGlscyc7XHJcbmNvbnN0IHt2ZXJzaW9ufSA9IHBhY2thZ2VKc29uKCk7XHJcblxyXG50eXBlIEluZm8gPSB7XHJcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXHJcbn1cclxuXHJcbnR5cGUgTGlzdGVuZXJTdGF0ID0ge1xyXG4gICAgZmlsdGVyOiBzdHJpbmcsXHJcbiAgICBzZWxlY3Rpb246IHN0cmluZyxcclxuICAgIHF1ZXVlU2l6ZTogbnVtYmVyLFxyXG4gICAgZXZlbnRDb3VudDogbnVtYmVyLFxyXG4gICAgc2Vjb25kc0FjdGl2ZTogbnVtYmVyLFxyXG59XHJcblxyXG50eXBlIENvbGxlY3Rpb25TdGF0ID0ge1xyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgc3Vic2NyaXB0aW9uQ291bnQ6IG51bWJlcixcclxuICAgIHdhaXRGb3JDb3VudDogbnVtYmVyLFxyXG4gICAgbWF4UXVldWVTaXplOiBudW1iZXIsXHJcbiAgICBzdWJzY3JpcHRpb25zOiBMaXN0ZW5lclN0YXRbXSxcclxuICAgIHdhaXRGb3I6IExpc3RlbmVyU3RhdFtdLFxyXG59XHJcblxyXG50eXBlIFN0YXQgPSB7XHJcbiAgICBjb2xsZWN0aW9uczogQ29sbGVjdGlvblN0YXRbXVxyXG59XHJcblxyXG50eXBlIENvbGxlY3Rpb25TdW1tYXJ5ID0ge1xyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgY291bnQ6IG51bWJlcixcclxuICAgIGluZGV4ZXM6IHN0cmluZ1tdLFxyXG59XHJcblxyXG4vLyBRdWVyeVxyXG5cclxuZnVuY3Rpb24gaW5mbygpOiBJbmZvIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmVyc2lvbixcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXQoX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogU3RhdCB7XHJcbiAgICBtYW1BY2Nlc3NSZXF1aXJlZChjb250ZXh0LCBhcmdzKTtcclxuICAgIGNvbnN0IGRiOiBBcmFuZ28gPSBjb250ZXh0LmRiO1xyXG4gICAgbGV0IHRvdGFsV2FpdEZvckNvdW50ID0gMDtcclxuICAgIGxldCB0b3RhbFN1YnNjcmlwdGlvbkNvdW50ID0gMDtcclxuICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gZGIuY29sbGVjdGlvbnMubWFwKChjb2xsZWN0aW9uOiBDb2xsZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgdG90YWxXYWl0Rm9yQ291bnQgKz0gY29sbGVjdGlvbi53YWl0Rm9yQ291bnQ7XHJcbiAgICAgICAgdG90YWxTdWJzY3JpcHRpb25Db3VudCArPSBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSxcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IGNvbGxlY3Rpb24uc3Vic2NyaXB0aW9uQ291bnQsXHJcbiAgICAgICAgICAgIHdhaXRGb3JDb3VudDogY29sbGVjdGlvbi53YWl0Rm9yQ291bnQsXHJcbiAgICAgICAgICAgIG1heFF1ZXVlU2l6ZTogY29sbGVjdGlvbi5tYXhRdWV1ZVNpemUsXHJcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnM6IFtdLFxyXG4gICAgICAgICAgICB3YWl0Rm9yOiBbXSxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgd2FpdEZvckNvdW50OiB0b3RhbFdhaXRGb3JDb3VudCxcclxuICAgICAgICBzdWJzY3JpcHRpb25Db3VudDogdG90YWxTdWJzY3JpcHRpb25Db3VudCxcclxuICAgICAgICBjb2xsZWN0aW9ucyxcclxuICAgIH07XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25zKF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8Q29sbGVjdGlvblN1bW1hcnlbXT4ge1xyXG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XHJcbiAgICBjb25zdCBkYjogQXJhbmdvID0gY29udGV4dC5kYjtcclxuICAgIGNvbnN0IGNvbGxlY3Rpb25zOiBDb2xsZWN0aW9uU3VtbWFyeVtdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgZGIuY29sbGVjdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBpbmRleGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRiQ29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uZGJDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiBhd2FpdCBkYkNvbGxlY3Rpb24uaW5kZXhlcygpKSB7XHJcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleC5maWVsZHMuam9pbignLCAnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbGxlY3Rpb25zLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lOiBjb2xsZWN0aW9uLm5hbWUsXHJcbiAgICAgICAgICAgIGNvdW50OiAoYXdhaXQgZGJDb2xsZWN0aW9uLmNvdW50KCkpLmNvdW50LFxyXG4gICAgICAgICAgICBpbmRleGVzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBkcm9wQ2FjaGVkRGJJbmZvKF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8Qm9vbGVhbj4ge1xyXG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XHJcbiAgICBjb250ZXh0LmRiLmRyb3BDYWNoZWREYkluZm8oKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vLyBNdXRhdGlvblxyXG5cclxuZXhwb3J0IGNvbnN0IHJlc29sdmVyc01hbSA9IHtcclxuICAgIFF1ZXJ5OiB7XHJcbiAgICAgICAgaW5mbyxcclxuICAgICAgICBnZXRDb2xsZWN0aW9ucyxcclxuICAgICAgICBzdGF0XHJcbiAgICB9LFxyXG4gICAgTXV0YXRpb246IHtcclxuICAgICAgICBkcm9wQ2FjaGVkRGJJbmZvLFxyXG4gICAgfVxyXG59O1xyXG4iXX0=