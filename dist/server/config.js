"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _os = _interopRequireDefault(require("os"));

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
var program = require('commander');

function getIp() {
  var ipv4 = Object.values(_os["default"].networkInterfaces()).flatMap(function (x) {
    return x;
  }).find(function (x) {
    return x.family === 'IPv4' && !x.internal;
  });
  return ipv4 && ipv4.address;
}

var MODE = {
  production: 'production',
  development: 'development'
};
program.option('-h, --host <host>', 'listening address', process.env.Q_SERVER_HOST || getIp()).option('-p, --port <port>', 'listening port', process.env.Q_SERVER_PORT || '4000').option('-d, --db-server <address>', 'database server:port', process.env.Q_DATABASE_SERVER || 'arangodb:8529').option('-n, --db-name <name>', 'database name', process.env.Q_DATABASE_NAME || 'blockchain').parse(process.argv);
var options = program;
var env = {
  ssl: (process.env.Q_SSL || '') === 'true',
  database_server: options.dbServer,
  database_name: options.dbName,
  server_host: options.host,
  server_port: options.port
};
var config = {
  server: {
    host: env.server_host,
    port: Number.parseInt(env.server_port),
    ssl: env.ssl ? {
      port: 4001,
      key: 'server/ssl/server.key',
      cert: 'server/ssl/server.crt'
    } : null
  },
  database: {
    server: env.database_server,
    name: env.database_name
  },
  listener: {
    restartTimeout: 1000
  }
};
console.log('Using config:', config);
var _default = config;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb25maWcuanMiXSwibmFtZXMiOlsicHJvZ3JhbSIsInJlcXVpcmUiLCJnZXRJcCIsImlwdjQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJvcyIsIm5ldHdvcmtJbnRlcmZhY2VzIiwiZmxhdE1hcCIsIngiLCJmaW5kIiwiZmFtaWx5IiwiaW50ZXJuYWwiLCJhZGRyZXNzIiwiTU9ERSIsInByb2R1Y3Rpb24iLCJkZXZlbG9wbWVudCIsIm9wdGlvbiIsInByb2Nlc3MiLCJlbnYiLCJRX1NFUlZFUl9IT1NUIiwiUV9TRVJWRVJfUE9SVCIsIlFfREFUQUJBU0VfU0VSVkVSIiwiUV9EQVRBQkFTRV9OQU1FIiwicGFyc2UiLCJhcmd2Iiwib3B0aW9ucyIsInNzbCIsIlFfU1NMIiwiZGF0YWJhc2Vfc2VydmVyIiwiZGJTZXJ2ZXIiLCJkYXRhYmFzZV9uYW1lIiwiZGJOYW1lIiwic2VydmVyX2hvc3QiLCJob3N0Iiwic2VydmVyX3BvcnQiLCJwb3J0IiwiY29uZmlnIiwic2VydmVyIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJrZXkiLCJjZXJ0IiwiZGF0YWJhc2UiLCJuYW1lIiwibGlzdGVuZXIiLCJyZXN0YXJ0VGltZW91dCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWlCQTs7QUFqQkE7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXZCOztBQUVBLFNBQVNDLEtBQVQsR0FBeUI7QUFDckIsTUFBTUMsSUFBSSxHQUFJQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsZUFBR0MsaUJBQUgsRUFBZCxDQUFELENBQ1JDLE9BRFEsQ0FDQSxVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBSjtBQUFBLEdBREQsRUFFUkMsSUFGUSxDQUVILFVBQUFELENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNFLE1BQUYsS0FBYSxNQUFiLElBQXVCLENBQUNGLENBQUMsQ0FBQ0csUUFBOUI7QUFBQSxHQUZFLENBQWI7QUFHQSxTQUFPVCxJQUFJLElBQUlBLElBQUksQ0FBQ1UsT0FBcEI7QUFDSDs7QUFFRCxJQUFNQyxJQUFJLEdBQUc7QUFDVEMsRUFBQUEsVUFBVSxFQUFFLFlBREg7QUFFVEMsRUFBQUEsV0FBVyxFQUFFO0FBRkosQ0FBYjtBQVlBaEIsT0FBTyxDQUNGaUIsTUFETCxDQUNZLG1CQURaLEVBQ2lDLG1CQURqQyxFQUVRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBWixJQUE2QmxCLEtBQUssRUFGMUMsRUFHS2UsTUFITCxDQUdZLG1CQUhaLEVBR2lDLGdCQUhqQyxFQUlRQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsYUFBWixJQUE2QixNQUpyQyxFQUtLSixNQUxMLENBS1ksMkJBTFosRUFLeUMsc0JBTHpDLEVBTVFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxpQkFBWixJQUFpQyxlQU56QyxFQU9LTCxNQVBMLENBT1ksc0JBUFosRUFPb0MsZUFQcEMsRUFRUUMsT0FBTyxDQUFDQyxHQUFSLENBQVlJLGVBQVosSUFBK0IsWUFSdkMsRUFTS0MsS0FUTCxDQVNXTixPQUFPLENBQUNPLElBVG5CO0FBV0EsSUFBTUMsT0FBdUIsR0FBRzFCLE9BQWhDO0FBRUEsSUFBTW1CLEdBQUcsR0FBRztBQUNSUSxFQUFBQSxHQUFHLEVBQUUsQ0FBQ1QsT0FBTyxDQUFDQyxHQUFSLENBQVlTLEtBQVosSUFBcUIsRUFBdEIsTUFBOEIsTUFEM0I7QUFFUkMsRUFBQUEsZUFBZSxFQUFFSCxPQUFPLENBQUNJLFFBRmpCO0FBR1JDLEVBQUFBLGFBQWEsRUFBRUwsT0FBTyxDQUFDTSxNQUhmO0FBSVJDLEVBQUFBLFdBQVcsRUFBRVAsT0FBTyxDQUFDUSxJQUpiO0FBS1JDLEVBQUFBLFdBQVcsRUFBRVQsT0FBTyxDQUFDVTtBQUxiLENBQVo7QUEyQkEsSUFBTUMsTUFBZSxHQUFHO0FBQ3BCQyxFQUFBQSxNQUFNLEVBQUU7QUFDSkosSUFBQUEsSUFBSSxFQUFFZixHQUFHLENBQUNjLFdBRE47QUFFSkcsSUFBQUEsSUFBSSxFQUFFRyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JyQixHQUFHLENBQUNnQixXQUFwQixDQUZGO0FBR0pSLElBQUFBLEdBQUcsRUFBRVIsR0FBRyxDQUFDUSxHQUFKLEdBQ0M7QUFDRVMsTUFBQUEsSUFBSSxFQUFFLElBRFI7QUFFRUssTUFBQUEsR0FBRyxFQUFFLHVCQUZQO0FBR0VDLE1BQUFBLElBQUksRUFBRTtBQUhSLEtBREQsR0FNQztBQVRGLEdBRFk7QUFZcEJDLEVBQUFBLFFBQVEsRUFBRTtBQUNOTCxJQUFBQSxNQUFNLEVBQUVuQixHQUFHLENBQUNVLGVBRE47QUFFTmUsSUFBQUEsSUFBSSxFQUFFekIsR0FBRyxDQUFDWTtBQUZKLEdBWlU7QUFnQnBCYyxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsY0FBYyxFQUFFO0FBRFY7QUFoQlUsQ0FBeEI7QUFxQkFDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQVosRUFBNkJYLE1BQTdCO2VBQ2VBLE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBDb3B5cmlnaHQgMjAxOC0yMDE5IFRPTiBERVYgU09MVVRJT05TIExURC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIFNPRlRXQVJFIEVWQUxVQVRJT04gTGljZW5zZSAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG4gKiBMaWNlbnNlIGF0OlxyXG4gKlxyXG4gKiBodHRwOi8vd3d3LnRvbi5kZXYvbGljZW5zZXNcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBUT04gREVWIHNvZnR3YXJlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuLy8gQGZsb3dcclxuaW1wb3J0IG9zIGZyb20gJ29zJztcclxuY29uc3QgcHJvZ3JhbSA9IHJlcXVpcmUoJ2NvbW1hbmRlcicpO1xyXG5cclxuZnVuY3Rpb24gZ2V0SXAoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGlwdjQgPSAoT2JqZWN0LnZhbHVlcyhvcy5uZXR3b3JrSW50ZXJmYWNlcygpKTogYW55KVxyXG4gICAgICAgIC5mbGF0TWFwKHggPT4geClcclxuICAgICAgICAuZmluZCh4ID0+IHguZmFtaWx5ID09PSAnSVB2NCcgJiYgIXguaW50ZXJuYWwpO1xyXG4gICAgcmV0dXJuIGlwdjQgJiYgaXB2NC5hZGRyZXNzO1xyXG59XHJcblxyXG5jb25zdCBNT0RFID0ge1xyXG4gICAgcHJvZHVjdGlvbjogJ3Byb2R1Y3Rpb24nLFxyXG4gICAgZGV2ZWxvcG1lbnQ6ICdkZXZlbG9wbWVudCcsXHJcbn07XHJcblxyXG50eXBlIFByb2dyYW1PcHRpb25zID0ge1xyXG4gICAgZGJTZXJ2ZXI6IHN0cmluZyxcclxuICAgIGRiTmFtZTogc3RyaW5nLFxyXG4gICAgaG9zdDogc3RyaW5nLFxyXG4gICAgcG9ydDogc3RyaW5nLFxyXG59XHJcblxyXG5wcm9ncmFtXHJcbiAgICAub3B0aW9uKCctaCwgLS1ob3N0IDxob3N0PicsICdsaXN0ZW5pbmcgYWRkcmVzcycsXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9TRVJWRVJfSE9TVCB8fCBnZXRJcCgpKVxyXG4gICAgLm9wdGlvbignLXAsIC0tcG9ydCA8cG9ydD4nLCAnbGlzdGVuaW5nIHBvcnQnLFxyXG4gICAgICAgIHByb2Nlc3MuZW52LlFfU0VSVkVSX1BPUlQgfHwgJzQwMDAnKVxyXG4gICAgLm9wdGlvbignLWQsIC0tZGItc2VydmVyIDxhZGRyZXNzPicsICdkYXRhYmFzZSBzZXJ2ZXI6cG9ydCcsXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9EQVRBQkFTRV9TRVJWRVIgfHwgJ2FyYW5nb2RiOjg1MjknKVxyXG4gICAgLm9wdGlvbignLW4sIC0tZGItbmFtZSA8bmFtZT4nLCAnZGF0YWJhc2UgbmFtZScsXHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuUV9EQVRBQkFTRV9OQU1FIHx8ICdibG9ja2NoYWluJylcclxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xyXG5cclxuY29uc3Qgb3B0aW9uczogUHJvZ3JhbU9wdGlvbnMgPSBwcm9ncmFtO1xyXG5cclxuY29uc3QgZW52ID0ge1xyXG4gICAgc3NsOiAocHJvY2Vzcy5lbnYuUV9TU0wgfHwgJycpID09PSAndHJ1ZScsXHJcbiAgICBkYXRhYmFzZV9zZXJ2ZXI6IG9wdGlvbnMuZGJTZXJ2ZXIsXHJcbiAgICBkYXRhYmFzZV9uYW1lOiBvcHRpb25zLmRiTmFtZSxcclxuICAgIHNlcnZlcl9ob3N0OiBvcHRpb25zLmhvc3QsXHJcbiAgICBzZXJ2ZXJfcG9ydDogb3B0aW9ucy5wb3J0LFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUUNvbmZpZyA9IHtcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICAgIGhvc3Q6IHN0cmluZyxcclxuICAgICAgICBwb3J0OiBudW1iZXIsXHJcbiAgICAgICAgc3NsOiA/e1xyXG4gICAgICAgICAgICBwb3J0OiBudW1iZXIsXHJcbiAgICAgICAgICAgIGtleTogc3RyaW5nLFxyXG4gICAgICAgICAgICBjZXJ0OiBzdHJpbmcsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBkYXRhYmFzZToge1xyXG4gICAgICAgIHNlcnZlcjogc3RyaW5nLFxyXG4gICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgfSxcclxuICAgIGxpc3RlbmVyOiB7XHJcbiAgICAgICAgcmVzdGFydFRpbWVvdXQ6IG51bWJlclxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBjb25maWc6IFFDb25maWcgPSB7XHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgICBob3N0OiBlbnYuc2VydmVyX2hvc3QsXHJcbiAgICAgICAgcG9ydDogTnVtYmVyLnBhcnNlSW50KGVudi5zZXJ2ZXJfcG9ydCksXHJcbiAgICAgICAgc3NsOiBlbnYuc3NsXHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgcG9ydDogNDAwMSxcclxuICAgICAgICAgICAgICAgIGtleTogJ3NlcnZlci9zc2wvc2VydmVyLmtleScsXHJcbiAgICAgICAgICAgICAgICBjZXJ0OiAnc2VydmVyL3NzbC9zZXJ2ZXIuY3J0JyxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgZGF0YWJhc2U6IHtcclxuICAgICAgICBzZXJ2ZXI6IGVudi5kYXRhYmFzZV9zZXJ2ZXIsXHJcbiAgICAgICAgbmFtZTogZW52LmRhdGFiYXNlX25hbWUsXHJcbiAgICB9LFxyXG4gICAgbGlzdGVuZXI6IHtcclxuICAgICAgICByZXN0YXJ0VGltZW91dDogMTAwMFxyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc29sZS5sb2coJ1VzaW5nIGNvbmZpZzonLCBjb25maWcpO1xyXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XHJcbiJdfQ==