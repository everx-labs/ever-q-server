"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProtocol = ensureProtocol;
exports.readConfigFile = readConfigFile;
exports.parseArangoConfig = parseArangoConfig;
exports.parseMemCachedConfig = parseMemCachedConfig;
exports.overrideDefs = overrideDefs;
exports.resolveValues = resolveValues;
exports.createConfig = createConfig;
exports.parseDataConfig = parseDataConfig;
exports.STATS = exports.programOptions = exports.slowQueries = exports.requestsMode = void 0;

var _os = _interopRequireDefault(require("os"));

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const DEFAULT_LISTENER_RESTART_TIMEOUT = 1000;
const DEFAULT_ARANGO_MAX_SOCKETS = 100;
const DEFAULT_SLOW_QUERIES_ARANGO_MAX_SOCKETS = 3;
const requestsMode = {
  kafka: "kafka",
  rest: "rest"
};
exports.requestsMode = requestsMode;
const slowQueries = {
  enable: "enable",
  redirect: "redirect",
  disable: "disable"
};
exports.slowQueries = slowQueries;
const programOptions = {};
exports.programOptions = programOptions;

const toPascal = s => `${s[0].toUpperCase()}${s.substr(1).toLowerCase()}`;

const opt = (option, def, description) => {
  const words = option.split("-");
  const name = `${words[0]}${words.slice(1).map(toPascal).join("")}`;
  const env = `Q_${words.map(x => x.toUpperCase()).join("_")}`;
  programOptions[name] = {
    option: `--${option} <value>`,
    env,
    def,
    description: `${description}${def && ` (default: "${def}")`}`
  };
};

const dataOpt = prefix => {
  const o = name => `${prefix.toLowerCase().split(" ").join("-")}-${name}`;

  const d = text => `${toPascal(prefix)} ${text}`;

  opt(o("mut"), "arangodb", d("mutable db config url"));
  opt(o("hot"), "arangodb", d("hot db config url"));
  opt(o("cold"), "", d("cold db config urls (comma separated)"));
  opt(o("cache"), "", d("cache config url"));
  opt(o("counterparties"), "", d("counterparties db config url"));
};

opt("host", getIp(), "Listening address");
opt("port", "4000", "Listening port");
opt("keep-alive", "60000", "GraphQL keep alive ms");
opt("config", "", "Path to JSON configuration file");
opt("requests-mode", "kafka", "Requests mode (kafka | rest)");
opt("requests-server", "kafka:9092", "Requests server url");
opt("requests-topic", "requests", "Requests topic name");
opt("requests-max-size", "16383", "Maximum request message size in bytes");
opt("slow-queries", "redirect", "Slow queries handling (enable | redirect | disable)");
dataOpt("data");
dataOpt("slow queries");
opt("auth-endpoint", "", "Auth endpoint");
opt("mam-access-keys", "", "Access keys used to authorize mam endpoint access");
opt("jaeger-endpoint", "", "Jaeger endpoint");
opt("trace-service", "Q Server", "Trace service name");
opt("trace-tags", "", "Additional trace tags (comma separated name=value pairs)");
opt("statsd-server", "", "StatsD server (host:port)");
opt("statsd-tags", "", "Additional StatsD tags (comma separated name=value pairs)");
opt("statsd-reset-interval", "", "Interval in ms between recreations of the StatsD socket");
opt("network-name", "cinet.tonlabs.io", "Define the name of the network q-server is working with");
opt("cache-key-prefix", "Q_", "Prefix string to identify q-server keys in datacache");
opt("endpoints", "", "Alternative endpoints of q-server (comma separated addresses)"); // Stats Schema

const STATS = {
  start: "start",
  prefix: "qserver.",
  doc: {
    count: "doc.count"
  },
  post: {
    count: "post.count",
    failed: "post.failed"
  },
  query: {
    count: "query.count",
    time: "query.time",
    active: "query.active",
    failed: "query.failed",
    slow: "query.slow"
  },
  subscription: {
    count: "subscription.count",
    active: "subscription.active"
  },
  waitFor: {
    active: "waitfor.active"
  }
};
exports.STATS = STATS;

function ensureProtocol(address, defaultProtocol) {
  return /^\w+:\/\//gi.test(address) ? address : `${defaultProtocol}://${address}`;
}

function readConfigFile(configFile) {
  try {
    return JSON.parse((0, _fs.readFileSync)(configFile).toString());
  } catch (error) {
    console.error("Error while reading config file:", error);
    return {};
  }
}

function parseArangoEndpoint(config, defMaxSockets) {
  const lowerCased = config.toLowerCase().trim();
  const hasProtocol = lowerCased.startsWith("http:") || lowerCased.startsWith("https:");
  const url = new URL(hasProtocol ? config : `https://${config}`);
  const protocol = url.protocol || "https:";
  const host = url.port || protocol.toLowerCase() === "https:" ? url.host : `${url.host}:8529`;
  const path = url.pathname !== "/" ? url.pathname : "";

  const param = name => url.searchParams.get(name) || "";

  return {
    server: `${protocol}//${host}${path}`,
    auth: url.username && `${url.username}:${url.password}`,
    name: param("name") || "blockchain",
    maxSockets: Number.parseInt(param("maxSockets")) || defMaxSockets,
    listenerRestartTimeout: Number.parseInt(param("listenerRestartTimeout")) || DEFAULT_LISTENER_RESTART_TIMEOUT
  };
}

function parseArangoEndpointList(config, defMaxSockets) {
  return config.split(",").filter(x => x.trim() !== "").map(x => parseArangoEndpoint(x, defMaxSockets));
}

function parseArangoConfig(config, defMaxSockets) {
  return parseArangoEndpointList(config, defMaxSockets)[0] || parseArangoEndpoint("", defMaxSockets);
}

function parseMemCachedConfig(config) {
  return {
    server: config
  };
}

function overrideDefs(options, defs) {
  const resolved = {};
  Object.entries(options).forEach(([name, value]) => {
    const opt = value;
    resolved[name] = { ...opt,
      def: defs[name] || opt.def
    };
  });
  return resolved;
}

function resolveValues(values, configFile, env, def) {
  const resolved = {};
  Object.entries(def).forEach(([name, value]) => {
    const opt = value;
    resolved[name] = values[name] || configFile[opt.env] || env[opt.env] || def[name].def;
  });
  return resolved;
}

function createConfig(values, configFile, env, def) {
  const resolved = resolveValues(values, configFile, env, def);
  const {
    data,
    slowQueriesData,
    networkName,
    cacheKeyPrefix
  } = parseDataConfig(resolved);
  return {
    config: resolved.config,
    server: {
      host: resolved.host,
      port: Number.parseInt(resolved.port),
      keepAlive: Number.parseInt(resolved.keepAlive)
    },
    requests: {
      mode: resolved.requestsMode,
      server: resolved.requestsServer,
      topic: resolved.requestsTopic,
      maxSize: Number.parseInt(resolved.requestsMaxSize)
    },
    data,
    slowQueries: resolved.slowQueries,
    slowQueriesData,
    authorization: {
      endpoint: resolved.authEndpoint
    },
    mamAccessKeys: new Set((resolved.mamAccessKeys || "").split(",")),
    jaeger: {
      endpoint: resolved.jaegerEndpoint,
      service: resolved.traceService,
      tags: parseTags(resolved.traceTags)
    },
    statsd: {
      resetInterval: Number.parseInt(resolved.statsdResetInterval) || 0,
      server: resolved.statsdServer,
      tags: (resolved.statsdTags || "").split(",").map(x => x.trim()).filter(x => x)
    },
    networkName,
    cacheKeyPrefix,
    endpoints: (resolved.endpoints || "").split(",").map(x => x.trim()).filter(x => x)
  };
} // Internals


function getIp() {
  const ipv4 = Object.values(_os.default.networkInterfaces()).reduce((acc, x) => acc.concat(x), []).find(x => x.family === "IPv4" && !x.internal);
  return ipv4 && ipv4.address;
}

function parseTags(s) {
  const tags = {};
  s.split(",").forEach(t => {
    const i = t.indexOf("=");

    if (i >= 0) {
      tags[t.substr(0, i)] = t.substr(i + 1);
    } else {
      tags[t] = "";
    }
  });
  return tags;
}

function parseDataConfig(values) {
  function parse(prefix, defMaxSockets) {
    const opt = suffix => values[`${prefix}${suffix}`] || "";

    const mut = parseArangoConfig(opt("Mut"), defMaxSockets);
    const hot = parseArangoConfig(opt("Hot"), defMaxSockets);
    const cold = parseArangoEndpointList(opt("Cold"), defMaxSockets);
    const cache = parseMemCachedConfig(opt("Cache"));
    const counterpartiesOpt = opt("Counterparties");
    const counterparties = counterpartiesOpt ? parseArangoConfig(counterpartiesOpt, defMaxSockets) : mut;
    return {
      mut,
      hot,
      cold,
      cache,
      counterparties
    };
  }

  const {
    networkName,
    cacheKeyPrefix
  } = values;
  return {
    data: parse("data", DEFAULT_ARANGO_MAX_SOCKETS),
    slowQueriesData: parse("slowQueries", DEFAULT_SLOW_QUERIES_ARANGO_MAX_SOCKETS),
    networkName,
    cacheKeyPrefix
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvY29uZmlnLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfTElTVEVORVJfUkVTVEFSVF9USU1FT1VUIiwiREVGQVVMVF9BUkFOR09fTUFYX1NPQ0tFVFMiLCJERUZBVUxUX1NMT1dfUVVFUklFU19BUkFOR09fTUFYX1NPQ0tFVFMiLCJyZXF1ZXN0c01vZGUiLCJrYWZrYSIsInJlc3QiLCJzbG93UXVlcmllcyIsImVuYWJsZSIsInJlZGlyZWN0IiwiZGlzYWJsZSIsInByb2dyYW1PcHRpb25zIiwidG9QYXNjYWwiLCJzIiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsIm9wdCIsIm9wdGlvbiIsImRlZiIsImRlc2NyaXB0aW9uIiwid29yZHMiLCJzcGxpdCIsIm5hbWUiLCJzbGljZSIsIm1hcCIsImpvaW4iLCJlbnYiLCJ4IiwiZGF0YU9wdCIsInByZWZpeCIsIm8iLCJkIiwidGV4dCIsImdldElwIiwiU1RBVFMiLCJzdGFydCIsImRvYyIsImNvdW50IiwicG9zdCIsImZhaWxlZCIsInF1ZXJ5IiwidGltZSIsImFjdGl2ZSIsInNsb3ciLCJzdWJzY3JpcHRpb24iLCJ3YWl0Rm9yIiwiZW5zdXJlUHJvdG9jb2wiLCJhZGRyZXNzIiwiZGVmYXVsdFByb3RvY29sIiwidGVzdCIsInJlYWRDb25maWdGaWxlIiwiY29uZmlnRmlsZSIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwiZXJyb3IiLCJjb25zb2xlIiwicGFyc2VBcmFuZ29FbmRwb2ludCIsImNvbmZpZyIsImRlZk1heFNvY2tldHMiLCJsb3dlckNhc2VkIiwidHJpbSIsImhhc1Byb3RvY29sIiwic3RhcnRzV2l0aCIsInVybCIsIlVSTCIsInByb3RvY29sIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwicGF0aG5hbWUiLCJwYXJhbSIsInNlYXJjaFBhcmFtcyIsImdldCIsInNlcnZlciIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibWF4U29ja2V0cyIsIk51bWJlciIsInBhcnNlSW50IiwibGlzdGVuZXJSZXN0YXJ0VGltZW91dCIsInBhcnNlQXJhbmdvRW5kcG9pbnRMaXN0IiwiZmlsdGVyIiwicGFyc2VBcmFuZ29Db25maWciLCJwYXJzZU1lbUNhY2hlZENvbmZpZyIsIm92ZXJyaWRlRGVmcyIsIm9wdGlvbnMiLCJkZWZzIiwicmVzb2x2ZWQiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInZhbHVlIiwicmVzb2x2ZVZhbHVlcyIsInZhbHVlcyIsImNyZWF0ZUNvbmZpZyIsImRhdGEiLCJzbG93UXVlcmllc0RhdGEiLCJuZXR3b3JrTmFtZSIsImNhY2hlS2V5UHJlZml4IiwicGFyc2VEYXRhQ29uZmlnIiwia2VlcEFsaXZlIiwicmVxdWVzdHMiLCJtb2RlIiwicmVxdWVzdHNTZXJ2ZXIiLCJ0b3BpYyIsInJlcXVlc3RzVG9waWMiLCJtYXhTaXplIiwicmVxdWVzdHNNYXhTaXplIiwiYXV0aG9yaXphdGlvbiIsImVuZHBvaW50IiwiYXV0aEVuZHBvaW50IiwibWFtQWNjZXNzS2V5cyIsIlNldCIsImphZWdlciIsImphZWdlckVuZHBvaW50Iiwic2VydmljZSIsInRyYWNlU2VydmljZSIsInRhZ3MiLCJwYXJzZVRhZ3MiLCJ0cmFjZVRhZ3MiLCJzdGF0c2QiLCJyZXNldEludGVydmFsIiwic3RhdHNkUmVzZXRJbnRlcnZhbCIsInN0YXRzZFNlcnZlciIsInN0YXRzZFRhZ3MiLCJlbmRwb2ludHMiLCJpcHY0Iiwib3MiLCJuZXR3b3JrSW50ZXJmYWNlcyIsInJlZHVjZSIsImFjYyIsImNvbmNhdCIsImZpbmQiLCJmYW1pbHkiLCJpbnRlcm5hbCIsInQiLCJpIiwiaW5kZXhPZiIsInN1ZmZpeCIsIm11dCIsImhvdCIsImNvbGQiLCJjYWNoZSIsImNvdW50ZXJwYXJ0aWVzT3B0IiwiY291bnRlcnBhcnRpZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7QUFDQTs7OztBQXBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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cUYsS0FBSyxHQUFHM0Qsb0JBQW9CLENBQUNyRSxHQUFHLENBQUMsT0FBRCxDQUFKLENBQWxDO0FBQ0EsVUFBTWlJLGlCQUFpQixHQUFHakksR0FBRyxDQUFDLGdCQUFELENBQTdCO0FBQ0EsVUFBTWtJLGNBQWMsR0FBR0QsaUJBQWlCLEdBQ2xDN0QsaUJBQWlCLENBQUM2RCxpQkFBRCxFQUFvQnRGLGFBQXBCLENBRGlCLEdBRWxDa0YsR0FGTjtBQUdBLFdBQU87QUFDSEEsTUFBQUEsR0FERztBQUVIQyxNQUFBQSxHQUZHO0FBR0hDLE1BQUFBLElBSEc7QUFJSEMsTUFBQUEsS0FKRztBQUtIRSxNQUFBQTtBQUxHLEtBQVA7QUFPSDs7QUFFRCxRQUFNO0FBQUUvQyxJQUFBQSxXQUFGO0FBQWVDLElBQUFBO0FBQWYsTUFBa0NMLE1BQXhDO0FBRUEsU0FBTztBQUNIRSxJQUFBQSxJQUFJLEVBQUU1QyxLQUFLLENBQUMsTUFBRCxFQUFTcEQsMEJBQVQsQ0FEUjtBQUVIaUcsSUFBQUEsZUFBZSxFQUFFN0MsS0FBSyxDQUFDLGFBQUQsRUFBZ0JuRCx1Q0FBaEIsQ0FGbkI7QUFHSGlHLElBQUFBLFdBSEc7QUFJSEMsSUFBQUE7QUFKRyxHQUFQO0FBTUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgb3MgZnJvbSBcIm9zXCI7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcblxuLy8gQ29uZmlnIFNjaGVtYVxuXG5leHBvcnQgdHlwZSBRQXJhbmdvQ29uZmlnID0ge1xuICAgIHNlcnZlcjogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBhdXRoOiBzdHJpbmcsXG4gICAgbWF4U29ja2V0czogbnVtYmVyLFxuICAgIGxpc3RlbmVyUmVzdGFydFRpbWVvdXQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFFNZW1DYWNoZWRDb25maWcgPSB7XG4gICAgc2VydmVyOiBzdHJpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBRRGF0YVByb3ZpZGVyc0NvbmZpZyA9IHtcbiAgICBtdXQ6IFFBcmFuZ29Db25maWc7XG4gICAgaG90OiBRQXJhbmdvQ29uZmlnO1xuICAgIGNvbGQ6IFFBcmFuZ29Db25maWdbXTtcbiAgICBjYWNoZTogUU1lbUNhY2hlZENvbmZpZztcbiAgICBjb3VudGVycGFydGllczogUUFyYW5nb0NvbmZpZztcbn07XG5cbmV4cG9ydCB0eXBlIFNsb3dRdWVyaWVzTW9kZSA9IFwiZW5hYmxlXCIgfCBcInJlZGlyZWN0XCIgfCBcImRpc2FibGVcIjtcbmV4cG9ydCB0eXBlIFFDb25maWcgPSB7XG4gICAgc2VydmVyOiB7XG4gICAgICAgIGhvc3Q6IHN0cmluZyxcbiAgICAgICAgcG9ydDogbnVtYmVyLFxuICAgICAgICBrZWVwQWxpdmU6IG51bWJlcixcbiAgICB9LFxuICAgIHJlcXVlc3RzOiB7XG4gICAgICAgIG1vZGU6IFwia2Fma2FcIiB8IFwicmVzdFwiLFxuICAgICAgICBzZXJ2ZXI6IHN0cmluZyxcbiAgICAgICAgdG9waWM6IHN0cmluZyxcbiAgICAgICAgbWF4U2l6ZTogbnVtYmVyLFxuICAgIH0sXG4gICAgZGF0YTogUURhdGFQcm92aWRlcnNDb25maWcsXG4gICAgc2xvd1F1ZXJpZXM6IFNsb3dRdWVyaWVzTW9kZSxcbiAgICBzbG93UXVlcmllc0RhdGE6IFFEYXRhUHJvdmlkZXJzQ29uZmlnLFxuICAgIGF1dGhvcml6YXRpb246IHtcbiAgICAgICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICB9LFxuICAgIGphZWdlcjoge1xuICAgICAgICBlbmRwb2ludDogc3RyaW5nLFxuICAgICAgICBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHsgW3N0cmluZ106IHN0cmluZyB9XG4gICAgfSxcbiAgICBzdGF0c2Q6IHtcbiAgICAgICAgc2VydmVyOiBzdHJpbmcsXG4gICAgICAgIHRhZ3M6IHN0cmluZ1tdLFxuICAgICAgICByZXNldEludGVydmFsOiBudW1iZXIsXG4gICAgfSxcbiAgICBtYW1BY2Nlc3NLZXlzOiBTZXQ8c3RyaW5nPixcbiAgICBpc1Rlc3RzPzogYm9vbGVhbixcbiAgICBuZXR3b3JrTmFtZTogc3RyaW5nLFxuICAgIGNhY2hlS2V5UHJlZml4OiBzdHJpbmcsXG4gICAgZW5kcG9pbnRzOiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IHR5cGUgUHJvZ3JhbU9wdGlvbiA9IHtcbiAgICBvcHRpb246IHN0cmluZyxcbiAgICBlbnY6IHN0cmluZyxcbiAgICBkZWY6IHN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxufTtcbmV4cG9ydCB0eXBlIFByb2dyYW1PcHRpb25zID0geyBbc3RyaW5nXTogUHJvZ3JhbU9wdGlvbiB9O1xuXG5jb25zdCBERUZBVUxUX0xJU1RFTkVSX1JFU1RBUlRfVElNRU9VVCA9IDEwMDA7XG5jb25zdCBERUZBVUxUX0FSQU5HT19NQVhfU09DS0VUUyA9IDEwMDtcbmNvbnN0IERFRkFVTFRfU0xPV19RVUVSSUVTX0FSQU5HT19NQVhfU09DS0VUUyA9IDM7XG5cbmV4cG9ydCBjb25zdCByZXF1ZXN0c01vZGUgPSB7XG4gICAga2Fma2E6IFwia2Fma2FcIixcbiAgICByZXN0OiBcInJlc3RcIixcbn07XG5cbmV4cG9ydCBjb25zdCBzbG93UXVlcmllcyA9IHtcbiAgICBlbmFibGU6IFwiZW5hYmxlXCIsXG4gICAgcmVkaXJlY3Q6IFwicmVkaXJlY3RcIixcbiAgICBkaXNhYmxlOiBcImRpc2FibGVcIixcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9ncmFtT3B0aW9uczogUHJvZ3JhbU9wdGlvbnMgPSB7fTtcblxuY29uc3QgdG9QYXNjYWwgPSBzID0+IGAke3NbMF0udG9VcHBlckNhc2UoKX0ke3Muc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCl9YDtcblxuY29uc3Qgb3B0ID0gKG9wdGlvbjogc3RyaW5nLCBkZWY6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHdvcmRzID0gb3B0aW9uLnNwbGl0KFwiLVwiKTtcbiAgICBjb25zdCBuYW1lID0gYCR7d29yZHNbMF19JHt3b3Jkcy5zbGljZSgxKS5tYXAodG9QYXNjYWwpLmpvaW4oXCJcIil9YDtcbiAgICBjb25zdCBlbnYgPSBgUV8ke3dvcmRzLm1hcCh4ID0+IHgudG9VcHBlckNhc2UoKSkuam9pbihcIl9cIil9YDtcbiAgICBwcm9ncmFtT3B0aW9uc1tuYW1lXSA9IHtcbiAgICAgICAgb3B0aW9uOiBgLS0ke29wdGlvbn0gPHZhbHVlPmAsXG4gICAgICAgIGVudixcbiAgICAgICAgZGVmLFxuICAgICAgICBkZXNjcmlwdGlvbjogYCR7ZGVzY3JpcHRpb259JHtkZWYgJiYgYCAoZGVmYXVsdDogXCIke2RlZn1cIilgfWAsXG4gICAgfTtcbn07XG5cbmNvbnN0IGRhdGFPcHQgPSAocHJlZml4OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBvID0gbmFtZSA9PiBgJHtwcmVmaXgudG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIikuam9pbihcIi1cIil9LSR7bmFtZX1gO1xuICAgIGNvbnN0IGQgPSB0ZXh0ID0+IGAke3RvUGFzY2FsKHByZWZpeCl9ICR7dGV4dH1gO1xuXG4gICAgb3B0KG8oXCJtdXRcIiksIFwiYXJhbmdvZGJcIiwgZChcIm11dGFibGUgZGIgY29uZmlnIHVybFwiKSk7XG4gICAgb3B0KG8oXCJob3RcIiksIFwiYXJhbmdvZGJcIiwgZChcImhvdCBkYiBjb25maWcgdXJsXCIpKTtcbiAgICBvcHQobyhcImNvbGRcIiksIFwiXCIsIGQoXCJjb2xkIGRiIGNvbmZpZyB1cmxzIChjb21tYSBzZXBhcmF0ZWQpXCIpKTtcbiAgICBvcHQobyhcImNhY2hlXCIpLCBcIlwiLCBkKFwiY2FjaGUgY29uZmlnIHVybFwiKSk7XG4gICAgb3B0KG8oXCJjb3VudGVycGFydGllc1wiKSwgXCJcIiwgZChcImNvdW50ZXJwYXJ0aWVzIGRiIGNvbmZpZyB1cmxcIikpO1xufTtcblxub3B0KFwiaG9zdFwiLCBnZXRJcCgpLCBcIkxpc3RlbmluZyBhZGRyZXNzXCIpO1xub3B0KFwicG9ydFwiLCBcIjQwMDBcIiwgXCJMaXN0ZW5pbmcgcG9ydFwiKTtcbm9wdChcImtlZXAtYWxpdmVcIiwgXCI2MDAwMFwiLCBcIkdyYXBoUUwga2VlcCBhbGl2ZSBtc1wiKTtcblxub3B0KFwiY29uZmlnXCIsIFwiXCIsIFwiUGF0aCB0byBKU09OIGNvbmZpZ3VyYXRpb24gZmlsZVwiKTtcblxub3B0KFwicmVxdWVzdHMtbW9kZVwiLCBcImthZmthXCIsIFwiUmVxdWVzdHMgbW9kZSAoa2Fma2EgfCByZXN0KVwiKTtcbm9wdChcInJlcXVlc3RzLXNlcnZlclwiLCBcImthZmthOjkwOTJcIiwgXCJSZXF1ZXN0cyBzZXJ2ZXIgdXJsXCIpO1xub3B0KFwicmVxdWVzdHMtdG9waWNcIiwgXCJyZXF1ZXN0c1wiLCBcIlJlcXVlc3RzIHRvcGljIG5hbWVcIik7XG5vcHQoXCJyZXF1ZXN0cy1tYXgtc2l6ZVwiLCBcIjE2MzgzXCIsIFwiTWF4aW11bSByZXF1ZXN0IG1lc3NhZ2Ugc2l6ZSBpbiBieXRlc1wiKTtcblxub3B0KFwic2xvdy1xdWVyaWVzXCIsIFwicmVkaXJlY3RcIiwgXCJTbG93IHF1ZXJpZXMgaGFuZGxpbmcgKGVuYWJsZSB8IHJlZGlyZWN0IHwgZGlzYWJsZSlcIik7XG5cbmRhdGFPcHQoXCJkYXRhXCIpO1xuZGF0YU9wdChcInNsb3cgcXVlcmllc1wiKTtcblxub3B0KFwiYXV0aC1lbmRwb2ludFwiLCBcIlwiLCBcIkF1dGggZW5kcG9pbnRcIik7XG5vcHQoXCJtYW0tYWNjZXNzLWtleXNcIiwgXCJcIiwgXCJBY2Nlc3Mga2V5cyB1c2VkIHRvIGF1dGhvcml6ZSBtYW0gZW5kcG9pbnQgYWNjZXNzXCIpO1xuXG5vcHQoXCJqYWVnZXItZW5kcG9pbnRcIiwgXCJcIiwgXCJKYWVnZXIgZW5kcG9pbnRcIik7XG5vcHQoXCJ0cmFjZS1zZXJ2aWNlXCIsIFwiUSBTZXJ2ZXJcIiwgXCJUcmFjZSBzZXJ2aWNlIG5hbWVcIik7XG5vcHQoXCJ0cmFjZS10YWdzXCIsIFwiXCIsIFwiQWRkaXRpb25hbCB0cmFjZSB0YWdzIChjb21tYSBzZXBhcmF0ZWQgbmFtZT12YWx1ZSBwYWlycylcIik7XG5cbm9wdChcInN0YXRzZC1zZXJ2ZXJcIiwgXCJcIiwgXCJTdGF0c0Qgc2VydmVyIChob3N0OnBvcnQpXCIpO1xub3B0KFwic3RhdHNkLXRhZ3NcIiwgXCJcIiwgXCJBZGRpdGlvbmFsIFN0YXRzRCB0YWdzIChjb21tYSBzZXBhcmF0ZWQgbmFtZT12YWx1ZSBwYWlycylcIik7XG5vcHQoXCJzdGF0c2QtcmVzZXQtaW50ZXJ2YWxcIiwgXCJcIiwgXCJJbnRlcnZhbCBpbiBtcyBiZXR3ZWVuIHJlY3JlYXRpb25zIG9mIHRoZSBTdGF0c0Qgc29ja2V0XCIpO1xuXG5vcHQoXCJuZXR3b3JrLW5hbWVcIiwgXCJjaW5ldC50b25sYWJzLmlvXCIsIFwiRGVmaW5lIHRoZSBuYW1lIG9mIHRoZSBuZXR3b3JrIHEtc2VydmVyIGlzIHdvcmtpbmcgd2l0aFwiKTtcblxub3B0KFwiY2FjaGUta2V5LXByZWZpeFwiLCBcIlFfXCIsIFwiUHJlZml4IHN0cmluZyB0byBpZGVudGlmeSBxLXNlcnZlciBrZXlzIGluIGRhdGFjYWNoZVwiKTtcblxub3B0KFwiZW5kcG9pbnRzXCIsIFwiXCIsIFwiQWx0ZXJuYXRpdmUgZW5kcG9pbnRzIG9mIHEtc2VydmVyIChjb21tYSBzZXBhcmF0ZWQgYWRkcmVzc2VzKVwiKTtcblxuLy8gU3RhdHMgU2NoZW1hXG5cbmV4cG9ydCBjb25zdCBTVEFUUyA9IHtcbiAgICBzdGFydDogXCJzdGFydFwiLFxuICAgIHByZWZpeDogXCJxc2VydmVyLlwiLFxuICAgIGRvYzoge1xuICAgICAgICBjb3VudDogXCJkb2MuY291bnRcIixcbiAgICB9LFxuICAgIHBvc3Q6IHtcbiAgICAgICAgY291bnQ6IFwicG9zdC5jb3VudFwiLFxuICAgICAgICBmYWlsZWQ6IFwicG9zdC5mYWlsZWRcIixcbiAgICB9LFxuICAgIHF1ZXJ5OiB7XG4gICAgICAgIGNvdW50OiBcInF1ZXJ5LmNvdW50XCIsXG4gICAgICAgIHRpbWU6IFwicXVlcnkudGltZVwiLFxuICAgICAgICBhY3RpdmU6IFwicXVlcnkuYWN0aXZlXCIsXG4gICAgICAgIGZhaWxlZDogXCJxdWVyeS5mYWlsZWRcIixcbiAgICAgICAgc2xvdzogXCJxdWVyeS5zbG93XCIsXG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb246IHtcbiAgICAgICAgY291bnQ6IFwic3Vic2NyaXB0aW9uLmNvdW50XCIsXG4gICAgICAgIGFjdGl2ZTogXCJzdWJzY3JpcHRpb24uYWN0aXZlXCIsXG4gICAgfSxcbiAgICB3YWl0Rm9yOiB7XG4gICAgICAgIGFjdGl2ZTogXCJ3YWl0Zm9yLmFjdGl2ZVwiLFxuICAgIH0sXG59O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVQcm90b2NvbChhZGRyZXNzOiBzdHJpbmcsIGRlZmF1bHRQcm90b2NvbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gL15cXHcrOlxcL1xcLy9naS50ZXN0KGFkZHJlc3MpID8gYWRkcmVzcyA6IGAke2RlZmF1bHRQcm90b2NvbH06Ly8ke2FkZHJlc3N9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRDb25maWdGaWxlKGNvbmZpZ0ZpbGU6IHN0cmluZyk6IGFueSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKGNvbmZpZ0ZpbGUpLnRvU3RyaW5nKCkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSByZWFkaW5nIGNvbmZpZyBmaWxlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJhbmdvRW5kcG9pbnQoY29uZmlnOiBzdHJpbmcsIGRlZk1heFNvY2tldHM6IG51bWJlcik6IFFBcmFuZ29Db25maWcge1xuICAgIGNvbnN0IGxvd2VyQ2FzZWQgPSBjb25maWcudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgY29uc3QgaGFzUHJvdG9jb2wgPSBsb3dlckNhc2VkLnN0YXJ0c1dpdGgoXCJodHRwOlwiKSB8fCBsb3dlckNhc2VkLnN0YXJ0c1dpdGgoXCJodHRwczpcIik7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChoYXNQcm90b2NvbCA/IGNvbmZpZyA6IGBodHRwczovLyR7Y29uZmlnfWApO1xuICAgIGNvbnN0IHByb3RvY29sID0gdXJsLnByb3RvY29sIHx8IFwiaHR0cHM6XCI7XG4gICAgY29uc3QgaG9zdCA9ICh1cmwucG9ydCB8fCBwcm90b2NvbC50b0xvd2VyQ2FzZSgpID09PSBcImh0dHBzOlwiKSA/IHVybC5ob3N0IDogYCR7dXJsLmhvc3R9Ojg1MjlgO1xuICAgIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWUgIT09IFwiL1wiID8gdXJsLnBhdGhuYW1lIDogXCJcIjtcbiAgICBjb25zdCBwYXJhbSA9IG5hbWUgPT4gdXJsLnNlYXJjaFBhcmFtcy5nZXQobmFtZSkgfHwgXCJcIjtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJ2ZXI6IGAke3Byb3RvY29sfS8vJHtob3N0fSR7cGF0aH1gLFxuICAgICAgICBhdXRoOiB1cmwudXNlcm5hbWUgJiYgYCR7dXJsLnVzZXJuYW1lfToke3VybC5wYXNzd29yZH1gLFxuICAgICAgICBuYW1lOiBwYXJhbShcIm5hbWVcIikgfHwgXCJibG9ja2NoYWluXCIsXG4gICAgICAgIG1heFNvY2tldHM6IE51bWJlci5wYXJzZUludChwYXJhbShcIm1heFNvY2tldHNcIikpIHx8IGRlZk1heFNvY2tldHMsXG4gICAgICAgIGxpc3RlbmVyUmVzdGFydFRpbWVvdXQ6IE51bWJlci5wYXJzZUludChwYXJhbShcImxpc3RlbmVyUmVzdGFydFRpbWVvdXRcIikpIHx8IERFRkFVTFRfTElTVEVORVJfUkVTVEFSVF9USU1FT1VULFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJhbmdvRW5kcG9pbnRMaXN0KGNvbmZpZzogc3RyaW5nLCBkZWZNYXhTb2NrZXRzOiBudW1iZXIpOiBRQXJhbmdvQ29uZmlnW10ge1xuICAgIHJldHVybiBjb25maWdcbiAgICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgICAuZmlsdGVyKHggPT4geC50cmltKCkgIT09IFwiXCIpXG4gICAgICAgIC5tYXAoeCA9PiBwYXJzZUFyYW5nb0VuZHBvaW50KHgsIGRlZk1heFNvY2tldHMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXJhbmdvQ29uZmlnKGNvbmZpZzogc3RyaW5nLCBkZWZNYXhTb2NrZXRzOiBudW1iZXIpOiBRQXJhbmdvQ29uZmlnIHtcbiAgICByZXR1cm4gcGFyc2VBcmFuZ29FbmRwb2ludExpc3QoY29uZmlnLCBkZWZNYXhTb2NrZXRzKVswXVxuICAgICAgICB8fCBwYXJzZUFyYW5nb0VuZHBvaW50KFwiXCIsIGRlZk1heFNvY2tldHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNZW1DYWNoZWRDb25maWcoY29uZmlnOiBzdHJpbmcpOiBRTWVtQ2FjaGVkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJ2ZXI6IGNvbmZpZyxcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3ZlcnJpZGVEZWZzKG9wdGlvbnM6IFByb2dyYW1PcHRpb25zLCBkZWZzOiBhbnkpOiBQcm9ncmFtT3B0aW9ucyB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdCA9ICgodmFsdWU6IGFueSk6IFByb2dyYW1PcHRpb24pO1xuICAgICAgICByZXNvbHZlZFtuYW1lXSA9IHtcbiAgICAgICAgICAgIC4uLm9wdCxcbiAgICAgICAgICAgIGRlZjogZGVmc1tuYW1lXSB8fCBvcHQuZGVmLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiByZXNvbHZlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVWYWx1ZXModmFsdWVzOiBhbnksIGNvbmZpZ0ZpbGU6IGFueSwgZW52OiBhbnksIGRlZjogUHJvZ3JhbU9wdGlvbnMpOiBhbnkge1xuICAgIGNvbnN0IHJlc29sdmVkID0ge307XG4gICAgT2JqZWN0LmVudHJpZXMoZGVmKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdCA9ICgodmFsdWU6IGFueSk6IFByb2dyYW1PcHRpb24pO1xuICAgICAgICByZXNvbHZlZFtuYW1lXSA9IHZhbHVlc1tuYW1lXSB8fCBjb25maWdGaWxlW29wdC5lbnZdIHx8IGVudltvcHQuZW52XSB8fCBkZWZbbmFtZV0uZGVmO1xuICAgIH0pO1xuICAgIHJldHVybiByZXNvbHZlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbmZpZyhcbiAgICB2YWx1ZXM6IGFueSxcbiAgICBjb25maWdGaWxlOiBhbnksXG4gICAgZW52OiBhbnksXG4gICAgZGVmOiBQcm9ncmFtT3B0aW9ucyxcbik6IFFDb25maWcge1xuICAgIGNvbnN0IHJlc29sdmVkID0gcmVzb2x2ZVZhbHVlcyh2YWx1ZXMsIGNvbmZpZ0ZpbGUsIGVudiwgZGVmKTtcbiAgICBjb25zdCB7IGRhdGEsIHNsb3dRdWVyaWVzRGF0YSwgbmV0d29ya05hbWUsIGNhY2hlS2V5UHJlZml4IH0gPSBwYXJzZURhdGFDb25maWcocmVzb2x2ZWQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlnOiByZXNvbHZlZC5jb25maWcsIFxuICAgICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgICAgIGhvc3Q6IHJlc29sdmVkLmhvc3QsXG4gICAgICAgICAgICBwb3J0OiBOdW1iZXIucGFyc2VJbnQocmVzb2x2ZWQucG9ydCksXG4gICAgICAgICAgICBrZWVwQWxpdmU6IE51bWJlci5wYXJzZUludChyZXNvbHZlZC5rZWVwQWxpdmUpLFxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0czoge1xuICAgICAgICAgICAgbW9kZTogcmVzb2x2ZWQucmVxdWVzdHNNb2RlLFxuICAgICAgICAgICAgc2VydmVyOiByZXNvbHZlZC5yZXF1ZXN0c1NlcnZlcixcbiAgICAgICAgICAgIHRvcGljOiByZXNvbHZlZC5yZXF1ZXN0c1RvcGljLFxuICAgICAgICAgICAgbWF4U2l6ZTogTnVtYmVyLnBhcnNlSW50KHJlc29sdmVkLnJlcXVlc3RzTWF4U2l6ZSksXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNsb3dRdWVyaWVzOiByZXNvbHZlZC5zbG93UXVlcmllcyxcbiAgICAgICAgc2xvd1F1ZXJpZXNEYXRhLFxuICAgICAgICBhdXRob3JpemF0aW9uOiB7XG4gICAgICAgICAgICBlbmRwb2ludDogcmVzb2x2ZWQuYXV0aEVuZHBvaW50LFxuICAgICAgICB9LFxuICAgICAgICBtYW1BY2Nlc3NLZXlzOiBuZXcgU2V0KChyZXNvbHZlZC5tYW1BY2Nlc3NLZXlzIHx8IFwiXCIpLnNwbGl0KFwiLFwiKSksXG4gICAgICAgIGphZWdlcjoge1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHJlc29sdmVkLmphZWdlckVuZHBvaW50LFxuICAgICAgICAgICAgc2VydmljZTogcmVzb2x2ZWQudHJhY2VTZXJ2aWNlLFxuICAgICAgICAgICAgdGFnczogcGFyc2VUYWdzKHJlc29sdmVkLnRyYWNlVGFncyksXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXRzZDoge1xuICAgICAgICAgICAgcmVzZXRJbnRlcnZhbDogTnVtYmVyLnBhcnNlSW50KHJlc29sdmVkLnN0YXRzZFJlc2V0SW50ZXJ2YWwpIHx8IDAsXG4gICAgICAgICAgICBzZXJ2ZXI6IHJlc29sdmVkLnN0YXRzZFNlcnZlcixcbiAgICAgICAgICAgIHRhZ3M6IChyZXNvbHZlZC5zdGF0c2RUYWdzIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoeCA9PiB4LnRyaW0oKSkuZmlsdGVyKHggPT4geCksXG4gICAgICAgIH0sXG4gICAgICAgIG5ldHdvcmtOYW1lLFxuICAgICAgICBjYWNoZUtleVByZWZpeCxcbiAgICAgICAgZW5kcG9pbnRzOiAocmVzb2x2ZWQuZW5kcG9pbnRzIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoeCA9PiB4LnRyaW0oKSkuZmlsdGVyKHggPT4geCksXG4gICAgfTtcbn1cblxuLy8gSW50ZXJuYWxzXG5cbmZ1bmN0aW9uIGdldElwKCk6IHN0cmluZyB7XG4gICAgY29uc3QgaXB2NCA9IChPYmplY3QudmFsdWVzKG9zLm5ldHdvcmtJbnRlcmZhY2VzKCkpOiBhbnkpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjLmNvbmNhdCh4KSwgW10pXG4gICAgICAgIC5maW5kKHggPT4geC5mYW1pbHkgPT09IFwiSVB2NFwiICYmICF4LmludGVybmFsKTtcbiAgICByZXR1cm4gaXB2NCAmJiBpcHY0LmFkZHJlc3M7XG59XG5cblxuZnVuY3Rpb24gcGFyc2VUYWdzKHM6IHN0cmluZyk6IHsgW3N0cmluZ106IHN0cmluZyB9IHtcbiAgICBjb25zdCB0YWdzOiB7IFtzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgIHMuc3BsaXQoXCIsXCIpLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHQuaW5kZXhPZihcIj1cIik7XG4gICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgIHRhZ3NbdC5zdWJzdHIoMCwgaSldID0gdC5zdWJzdHIoaSArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFnc1t0XSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGFncztcblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGFDb25maWcodmFsdWVzOiBhbnkpOiB7XG4gICAgZGF0YTogUURhdGFQcm92aWRlcnNDb25maWcsXG4gICAgc2xvd1F1ZXJpZXNEYXRhOiBRRGF0YVByb3ZpZGVyc0NvbmZpZyxcbiAgICBuZXR3b3JrTmFtZTogc3RyaW5nLFxuICAgIGNhY2hlS2V5UHJlZml4OiBzdHJpbmcsXG59IHtcbiAgICBmdW5jdGlvbiBwYXJzZShwcmVmaXg6IHN0cmluZywgZGVmTWF4U29ja2V0czogbnVtYmVyKTogUURhdGFQcm92aWRlcnNDb25maWcge1xuICAgICAgICBjb25zdCBvcHQgPSAoc3VmZml4OiBzdHJpbmcpOiBzdHJpbmcgPT4gdmFsdWVzW2Ake3ByZWZpeH0ke3N1ZmZpeH1gXSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBtdXQgPSBwYXJzZUFyYW5nb0NvbmZpZyhvcHQoXCJNdXRcIiksIGRlZk1heFNvY2tldHMpO1xuICAgICAgICBjb25zdCBob3QgPSBwYXJzZUFyYW5nb0NvbmZpZyhvcHQoXCJIb3RcIiksIGRlZk1heFNvY2tldHMpO1xuICAgICAgICBjb25zdCBjb2xkID0gcGFyc2VBcmFuZ29FbmRwb2ludExpc3Qob3B0KFwiQ29sZFwiKSwgZGVmTWF4U29ja2V0cyk7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gcGFyc2VNZW1DYWNoZWRDb25maWcob3B0KFwiQ2FjaGVcIikpO1xuICAgICAgICBjb25zdCBjb3VudGVycGFydGllc09wdCA9IG9wdChcIkNvdW50ZXJwYXJ0aWVzXCIpO1xuICAgICAgICBjb25zdCBjb3VudGVycGFydGllcyA9IGNvdW50ZXJwYXJ0aWVzT3B0XG4gICAgICAgICAgICA/IHBhcnNlQXJhbmdvQ29uZmlnKGNvdW50ZXJwYXJ0aWVzT3B0LCBkZWZNYXhTb2NrZXRzKVxuICAgICAgICAgICAgOiBtdXQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtdXQsXG4gICAgICAgICAgICBob3QsXG4gICAgICAgICAgICBjb2xkLFxuICAgICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgICBjb3VudGVycGFydGllcyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IG5ldHdvcmtOYW1lLCBjYWNoZUtleVByZWZpeCB9ID0gdmFsdWVzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogcGFyc2UoXCJkYXRhXCIsIERFRkFVTFRfQVJBTkdPX01BWF9TT0NLRVRTKSxcbiAgICAgICAgc2xvd1F1ZXJpZXNEYXRhOiBwYXJzZShcInNsb3dRdWVyaWVzXCIsIERFRkFVTFRfU0xPV19RVUVSSUVTX0FSQU5HT19NQVhfU09DS0VUUyksXG4gICAgICAgIG5ldHdvcmtOYW1lLFxuICAgICAgICBjYWNoZUtleVByZWZpeCxcbiAgICB9O1xufVxuIl19