"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.struct = struct;
exports.array = array;
exports.join = join;
exports.joinArray = joinArray;
exports.scalar = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

/*
 * Copyright 2018-2019 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
function qlFields(path, filter, fieldTypes, qlField) {
  var conditions = [];
  Object.entries(filter).forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        filterKey = _ref2[0],
        filterValue = _ref2[1];

    var fieldType = fieldTypes[filterKey];

    if (fieldType) {
      conditions.push(qlField(fieldType, path, filterKey, filterValue));
    }
  });
  return qlCombine(conditions, 'AND', 'false');
}

function testFields(value, filter, fieldTypes, testField) {
  var failed = Object.entries(filter).find(function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
        filterKey = _ref4[0],
        filterValue = _ref4[1];

    var fieldType = fieldTypes[filterKey];
    return !!(fieldType && testField(fieldType, value, filterKey, filterValue));
  });
  return !failed;
}

function combine(path, key) {
  return key !== '' ? "".concat(path, ".").concat(key) : path;
}

function qlOp(path, op, filter) {
  return "".concat(path, " ").concat(op, " ").concat(JSON.stringify(filter));
}

function qlCombine(conditions, op, defaultConditions) {
  if (conditions.length === 0) {
    return defaultConditions;
  }

  if (conditions.length === 1) {
    return conditions[0];
  }

  return '(' + conditions.join(") ".concat(op, " (")) + ')';
}

function qlIn(path, filter) {
  var conditions = filter.map(function (value) {
    return qlOp(path, '==', value);
  });
  return qlCombine(conditions, 'OR', 'false');
} // Scalars


var scalarEq = {
  ql: function ql(path, filter) {
    return qlOp(path, '==', filter);
  },
  test: function test(value, filter) {
    return value === filter;
  }
};
var scalarNe = {
  ql: function ql(path, filter) {
    return qlOp(path, '!=', filter);
  },
  test: function test(value, filter) {
    return value !== filter;
  }
};
var scalarLt = {
  ql: function ql(path, filter) {
    return qlOp(path, '<', filter);
  },
  test: function test(value, filter) {
    return value < filter;
  }
};
var scalarLe = {
  ql: function ql(path, filter) {
    return qlOp(path, '<=', filter);
  },
  test: function test(value, filter) {
    return value <= filter;
  }
};
var scalarGt = {
  ql: function ql(path, filter) {
    return qlOp(path, '>', filter);
  },
  test: function test(value, filter) {
    return value > filter;
  }
};
var scalarGe = {
  ql: function ql(path, filter) {
    return qlOp(path, '>=', filter);
  },
  test: function test(value, filter) {
    return value >= filter;
  }
};
var scalarIn = {
  ql: function ql(path, filter) {
    return qlIn(path, filter);
  },
  test: function test(value, filter) {
    return filter.includes(value);
  }
};
var scalarNotIn = {
  ql: function ql(path, filter) {
    return "NOT (".concat(qlIn(path, filter), ")");
  },
  test: function test(value, filter) {
    return !filter.includes(value);
  }
};

function createScalar() {
  var fields = {
    eq: scalarEq,
    ne: scalarNe,
    lt: scalarLt,
    le: scalarLe,
    gt: scalarGt,
    ge: scalarGe,
    "in": scalarIn,
    notIn: scalarNotIn
  };
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, fields, function (op, path, filterKey, filterValue) {
        return op.ql(path, filterValue);
      });
    },
    test: function test(value, filter) {
      return testFields(value, filter, fields, function (op, value, filterKey, filterValue) {
        return op.test(value, filterValue);
      });
    }
  };
}

var scalar = createScalar(); // Structs

exports.scalar = scalar;

function struct(fields, isCollection) {
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, fields, function (fieldType, path, filterKey, filterValue) {
        var fieldName = isCollection && filterKey === 'id' ? '_key' : filterKey;
        return fieldType.ql(combine(path, fieldName), filterValue);
      });
    },
    test: function test(value, filter) {
      if (!value) {
        return false;
      }

      return testFields(value, filter, fields, function (fieldType, value, filterKey, filterValue) {
        var fieldName = isCollection && filterKey === 'id' ? '_key' : filterKey;
        return fieldType.test(value[fieldName], filterValue);
      });
    }
  };
} // Arrays


function array(itemType) {
  var ops = {
    all: {
      ql: function ql(path, filter) {
        var itemQl = itemType.ql('CURRENT', filter);
        return "LENGTH(".concat(path, "[* FILTER ").concat(itemQl, "]) == LENGTH(").concat(path, ")");
      },
      test: function test(value, filter) {
        var failedIndex = value.findIndex(function (x) {
          return !itemType.test(x, filter);
        });
        return failedIndex < 0;
      }
    },
    any: {
      ql: function ql(path, filter) {
        var itemQl = itemType.ql('CURRENT', filter);
        return "LENGTH(".concat(path, "[* FILTER ").concat(itemQl, "]) > 0");
      },
      test: function test(value, filter) {
        var succeededIndex = value.findIndex(function (x) {
          return itemType.test(x, filter);
        });
        return succeededIndex >= 0;
      }
    }
  };
  return {
    ql: function ql(path, filter) {
      return qlFields(path, filter, ops, function (op, path, filterKey, filterValue) {
        return op.ql(path, filterValue);
      });
    },
    test: function test(value, filter) {
      if (!value) {
        return false;
      }

      return testFields(value, filter, ops, function (op, value, filterKey, filterValue) {
        return op.test(value, filterValue);
      });
    }
  };
} // Joins


function join(onField, refCollection, refType) {
  return {
    ql: function ql(path, filter) {
      var on_path = path.split('.').slice(0, -1).concat(onField).join('.');
      var alias = "".concat(on_path.replace('.', '_'));
      var refQl = refType.ql(alias, filter);
      return "\n                LENGTH(\n                    FOR ".concat(alias, " IN ").concat(refCollection, " \n                    FILTER (").concat(alias, "._key == ").concat(on_path, ") AND (").concat(refQl, ")\n                    LIMIT 1\n                    RETURN 1\n                ) > 0");
    },
    test: refType.test
  };
}

function joinArray(onField, refCollection, refType) {
  return {
    ql: function ql(path, filter) {
      var refFilter = filter.all || filter.any;
      var all = !!filter.all;
      var on_path = path.split('.').slice(0, -1).concat(onField).join('.');
      var alias = "".concat(on_path.replace('.', '_'));
      var refQl = refType.ql(alias, refFilter);
      return "\n                (LENGTH(".concat(on_path, ") > 0)\n                AND (LENGTH(\n                    FOR ").concat(alias, " IN ").concat(refCollection, " \n                    FILTER (").concat(alias, "._key IN ").concat(on_path, ") AND (").concat(refQl, ")\n                    ").concat(!all ? 'LIMIT 1' : '', "\n                    RETURN 1\n                ) ").concat(all ? "== LENGTH(".concat(on_path, ")") : '> 0', ")");
    },
    test: refType.test
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,