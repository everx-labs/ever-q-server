"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _schema = require("ton-labs-dev-ops/dist/src/schema");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var string = _schema.Def.string,
    _int = _schema.Def["int"],
    bool = _schema.Def.bool,
    _float = _schema.Def["float"],
    ref = _schema.Def.ref,
    arrayOf = _schema.Def.arrayOf,
    unionOf = _schema.Def.unionOf; // Types scheme begin

function uint(size, doc) {
  return _objectSpread({
    _int: {
      unsigned: true,
      size: size
    }
  }, doc ? {
    _doc: doc
  } : {});
}

var u8 = function u8(doc) {
  return uint(8, doc);
};

var u16 = function u16(doc) {
  return uint(16, doc);
};

var u32 = function u32(doc) {
  return uint(32, doc);
};

var u64 = function u64(doc) {
  return _float(doc);
};

var join = function join(refDef, on) {
  return _objectSpread({}, ref(refDef), {
    _: {
      join: {
        on: on
      }
    }
  });
};

var CurrencyCollection = {
  Grams: string()
};
var None = {
  None: string()
};
var IntermediateAddress = unionOf({
  Regular: {
    use_src_bits: u8()
  },
  Simple: {
    workchain_id: _int(),
    addr_pfx: string()
  },
  Ext: {
    workchain_id: _int(),
    addr_pfx: string()
  }
});
var ExtBlkRef = {
  end_lt: u64(),
  seq_no: u32(),
  root_hash: string(),
  file_hash: string()
};
var TickTock = {
  tick: bool(),
  tock: bool()
};
var StorageUsedShort = {
  cells: _int(),
  bits: _int()
};
var SplitMergeInfo = {
  cur_shard_pfx_len: u8(),
  acc_split_depth: u8(),
  this_addr: string(),
  sibling_addr: string()
}; //Messages scheme begin

var Message = {
  _doc: 'This is message',
  _: {
    collection: 'messages'
  },
  transaction_id: string(),
  block_id: string(),
  header: unionOf({
    IntMsgInfo: {
      ihr_disabled: bool(),
      bounce: bool(),
      bounced: bool(),
      src: string(),
      dst: string(),
      value: ref({
        CurrencyCollection: CurrencyCollection
      }),
      ihr_fee: _int(),
      fwd_fee: _int(),
      created_lt: u64(),
      created_at: _int()
    },
    ExtInMsgInfo: {
      src: string(),
      dst: string(),
      import_fee: _int()
    },
    ExtOutMsgInfo: {
      src: string(),
      dst: string(),
      created_lt: u64(),
      created_at: _int()
    }
  }),
  init: {
    split_depth: _int(),
    special: ref({
      TickTock: TickTock
    }),
    code: string(),
    data: string(),
    library: string()
  },
  body: string(),
  status: string()
};
var MsgEnvelope = {
  msg: string(),
  next_addr: ref({
    IntermediateAddress: IntermediateAddress
  }),
  cur_addr: ref({
    IntermediateAddress: IntermediateAddress
  }),
  fwd_fee_remaining: ref({
    CurrencyCollection: CurrencyCollection
  })
};
var InMsg = unionOf({
  External: {
    msg: string(),
    transaction: string()
  },
  IHR: {
    msg: string(),
    transaction: string(),
    ihr_fee: _int(),
    proof_created: string()
  },
  Immediatelly: {
    in_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    fwd_fee: _int(),
    transaction: string()
  },
  Final: {
    in_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    fwd_fee: _int(),
    transaction: string()
  },
  Transit: {
    in_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    transit_fee: _int()
  },
  DiscardedFinal: {
    in_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    transaction_id: u64(),
    fwd_fee: _int()
  },
  DiscardedTransit: {
    in_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    transaction_id: u64(),
    fwd_fee: _int(),
    proof_delivered: string()
  }
});
var OutMsg = unionOf({
  None: ref({
    None: None
  }),
  External: {
    msg: string(),
    transaction: string()
  },
  Immediately: {
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    transaction: string(),
    reimport: ref({
      InMsg: InMsg
    })
  },
  OutMsgNew: {
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    transaction: string()
  },
  Transit: {
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    imported: ref({
      InMsg: InMsg
    })
  },
  Dequeue: {
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    import_block_lt: u64()
  },
  TransitRequired: {
    out_msg: ref({
      MsgEnvelope: MsgEnvelope
    }),
    imported: ref({
      InMsg: InMsg
    })
  }
}); //Blocks scheme begin

var Block = {
  _doc: 'This is Block',
  _: {
    collection: 'blocks'
  },
  status: string(),
  global_id: u32(),
  info: {
    want_split: bool(),
    seq_no: u32(),
    after_merge: bool(),
    gen_utime: _int(),
    gen_catchain_seqno: u32(),
    flags: u16(),
    prev_ref: {
      prev: {
        seq_no: _int(),
        file_hash: string(),
        root_hash: string(),
        end_lt: _int()
      }
    },
    version: u32(),
    gen_validator_list_hash_short: u32(),
    before_split: bool(),
    after_split: bool(),
    want_merge: bool(),
    vert_seq_no: _int(),
    start_lt: u64(),
    end_lt: u64(),
    shard: {
      shard_pfx_bits: u8(),
      workchain_id: _int(),
      shard_prefix: string()
    },
    min_ref_mc_seqno: u32(),
    master_ref: {
      master: ref({
        ExtBlkRef: ExtBlkRef
      })
    },
    prev_vert_ref: {
      prev: ref({
        ExtBlkRef: ExtBlkRef
      }),
      prev_alt: ref({
        ExtBlkRef: ExtBlkRef
      })
    }
  },
  value_flow: {
    to_next_blk: ref({
      CurrencyCollection: CurrencyCollection
    }),
    exported: ref({
      CurrencyCollection: CurrencyCollection
    }),
    fees_collected: ref({
      CurrencyCollection: CurrencyCollection
    }),
    created: ref({
      CurrencyCollection: CurrencyCollection
    }),
    imported: ref({
      CurrencyCollection: CurrencyCollection
    }),
    from_prev_blk: ref({
      CurrencyCollection: CurrencyCollection
    }),
    minted: ref({
      CurrencyCollection: CurrencyCollection
    }),
    fees_imported: ref({
      CurrencyCollection: CurrencyCollection
    })
  },
  extra: {
    in_msg_descr: arrayOf(ref({
      InMsg: InMsg
    })),
    rand_seed: string(),
    out_msg_descr: arrayOf(ref({
      OutMsg: OutMsg
    })),
    account_blocks: arrayOf({
      account_addr: string(),
      transactions: arrayOf(string()),
      state_update: {
        old_hash: string(),
        new_hash: string()
      },
      tr_count: _int()
    })
  },
  state_update: {
    "new": string(),
    new_hash: string(),
    new_depth: _int(),
    old: string(),
    old_hash: string(),
    old_depth: _int()
  }
}; //Accounts scheme begin

var Account = {
  _doc: 'TON Account',
  _: {
    collection: 'accounts'
  },
  _key: string(),
  storage_stat: {
    last_paid: u32(),
    due_payment: _int()
  },
  storage: {
    last_trans_lt: u64(),
    balance: ref({
      CurrencyCollection: CurrencyCollection
    }),
    state: unionOf({
      AccountUninit: ref({
        None: None
      }),
      AccountActive: {
        split_depth: _int(),
        special: ref({
          TickTock: TickTock
        }),
        code: string(),
        data: string(),
        library: string()
      },
      AccountFrozen: ref({
        None: None
      })
    })
  },
  addr: string()
}; //Transaction scheme begin

var TrStoragePhase = {
  storage_fees_collected: _int(),
  storage_fees_due: _int(),
  status_change: string()
};
var TrCreditPhase = {
  due_fees_collected: _int(),
  credit: ref({
    CurrencyCollection: CurrencyCollection
  })
};
var TrComputePhase = unionOf({
  Skipped: {
    reason: string()
  },
  Vm: {
    success: bool(),
    msg_state_used: bool(),
    account_activated: bool(),
    gas_fees: _int(),
    gas_used: _int(),
    gas_limit: _int(),
    gas_credit: _int(),
    mode: _int(),
    exit_code: _int(),
    exit_arg: _int(),
    vm_steps: u32(),
    vm_init_state_hash: string(),
    vm_final_state_hash: string()
  }
});
var TrActionPhase = {
  success: bool(),
  valid: bool(),
  no_funds: bool(),
  status_change: string(),
  total_fwd_fees: _int(),
  total_action_fees: _int(),
  result_code: _int(),
  result_arg: _int(),
  tot_actions: _int(),
  spec_actions: _int(),
  skipped_actions: _int(),
  msgs_created: _int(),
  action_list_hash: string(),
  tot_msg_size: ref({
    StorageUsedShort: StorageUsedShort
  })
};
var TrBouncePhase = unionOf({
  Negfunds: ref({
    None: None
  }),
  Nofunds: {
    msg_size: ref({
      StorageUsedShort: StorageUsedShort
    }),
    req_fwd_fees: _int()
  },
  Ok: {
    msg_size: ref({
      StorageUsedShort: StorageUsedShort
    }),
    msg_fees: _int(),
    fwd_fees: _int()
  }
});
var Transaction = {
  _doc: 'This is transaction',
  _: {
    collection: 'transactions'
  },
  block_id: string(),
  status: string(),
  account_addr: string(),
  lt: u64(),
  last_trans_lt: u64(),
  prev_trans_hash: string(),
  prev_trans_lt: u64(),
  now: u32(),
  outmsg_cnt: _int(),
  orig_status: string(),
  end_status: string(),
  in_msg: string(),
  in_message: join({
    Message: Message
  }, 'in_msg'),
  out_msgs: arrayOf(string()),
  out_messages: arrayOf(join({
    Message: Message
  }, 'out_msgs')),
  total_fees: _int(),
  state_update: {
    old_hash: string(),
    new_hash: string()
  },
  description: unionOf({
    Ordinary: {
      credit_first: bool(),
      storage_ph: ref({
        TrStoragePhase: TrStoragePhase
      }),
      credit_ph: ref({
        TrCreditPhase: TrCreditPhase
      }),
      compute_ph: ref({
        TrComputePhase: TrComputePhase
      }),
      action: ref({
        TrActionPhase: TrActionPhase
      }),
      aborted: bool(),
      bounce: ref({
        TrBouncePhase: TrBouncePhase
      }),
      destroyed: bool()
    },
    Storage: ref({
      TrStoragePhase: TrStoragePhase
    }),
    TickTock: {
      tt: string(),
      storage: ref({
        TrStoragePhase: TrStoragePhase
      }),
      compute_ph: ref({
        TrComputePhase: TrComputePhase
      }),
      action: ref({
        TrActionPhase: TrActionPhase
      }),
      aborted: bool(),
      destroyed: bool()
    },
    SplitPrepare: {
      split_info: ref({
        SplitMergeInfo: SplitMergeInfo
      }),
      compute_ph: ref({
        TrComputePhase: TrComputePhase
      }),
      action: ref({
        TrActionPhase: TrActionPhase
      }),
      aborted: bool(),
      destroyed: bool()
    },
    SplitInstall: {
      split_info: ref({
        SplitMergeInfo: SplitMergeInfo
      }),
      prepare_transaction: string(),
      installed: bool()
    },
    MergePrepare: {
      split_info: ref({
        SplitMergeInfo: SplitMergeInfo
      }),
      storage_ph: ref({
        TrStoragePhase: TrStoragePhase
      }),
      aborted: bool()
    },
    MergeInstall: {
      split_info: ref({
        SplitMergeInfo: SplitMergeInfo
      }),
      prepare_transaction: string(),
      credit_ph: ref({
        TrCreditPhase: TrCreditPhase
      }),
      compute_ph: ref({
        TrComputePhase: TrComputePhase
      }),
      action: ref({
        TrActionPhase: TrActionPhase
      }),
      aborted: bool(),
      destroyed: bool()
    }
  }),
  root_cell: string()
}; //Root scheme declaration

var schema = {
  _class: {
    types: {
      None: None,
      CurrencyCollection: CurrencyCollection,
      IntermediateAddress: IntermediateAddress,
      ExtBlkRef: ExtBlkRef,
      TickTock: TickTock,
      StorageUsedShort: StorageUsedShort,
      SplitMergeInfo: SplitMergeInfo,
      Message: Message,
      MsgEnvelope: MsgEnvelope,
      InMsg: InMsg,
      OutMsg: OutMsg,
      Block: Block,
      Account: Account,
      Transaction: Transaction,
      TrStoragePhase: TrStoragePhase,
      TrCreditPhase: TrCreditPhase,
      TrComputePhase: TrComputePhase,
      TrActionPhase: TrActionPhase,
      TrBouncePhase: TrBouncePhase
    }
  }
};
var _default = schema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,