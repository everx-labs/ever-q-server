"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

var _config = require("./config");

var _server = _interopRequireDefault(require("./server"));

var _logs = _interopRequireDefault(require("./logs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2018-2020 TON DEV SOLUTIONS LTD.
 *
 * Licensed under the SOFTWARE EVALUATION License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at:
 *
 * http://www.ton.dev/licenses
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific TON DEV software governing permissions and
 * limitations under the License.
 */
const program = require('commander');

Object.values(_config.programOptions).forEach(value => {
  const option = value;
  program.option(option.option, option.description);
});
program.parse(process.argv);
const configData = program.config ? (0, _config.readConfigFile)(program.config) : {};
const config = (0, _config.createConfig)(program, // program args
configData, // config file
process.env, // os envs
_config.programOptions // defaults
);
const logs = new _logs.default();
const configLog = logs.create('config');
configLog.debug('USE', config);
const server = new _server.default({
  config,
  logs
});

function main() {
  (async () => {
    try {
      await server.start();
    } catch (error) {
      server.log.error('FAILED', 'START', error);
      process.exit(1);
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOlsicHJvZ3JhbSIsInJlcXVpcmUiLCJPYmplY3QiLCJ2YWx1ZXMiLCJwcm9ncmFtT3B0aW9ucyIsImZvckVhY2giLCJ2YWx1ZSIsIm9wdGlvbiIsImRlc2NyaXB0aW9uIiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImNvbmZpZ0RhdGEiLCJjb25maWciLCJlbnYiLCJsb2dzIiwiUUxvZ3MiLCJjb25maWdMb2ciLCJjcmVhdGUiLCJkZWJ1ZyIsInNlcnZlciIsIlRPTlFTZXJ2ZXIiLCJtYWluIiwic3RhcnQiLCJlcnJvciIsImxvZyIsImV4aXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFrQkE7O0FBRUE7O0FBQ0E7Ozs7QUFyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBU0EsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFFQUMsTUFBTSxDQUFDQyxNQUFQLENBQWNDLHNCQUFkLEVBQThCQyxPQUE5QixDQUF1Q0MsS0FBRCxJQUFXO0FBQzdDLFFBQU1DLE1BQU0sR0FBS0QsS0FBakI7QUFDQU4sRUFBQUEsT0FBTyxDQUFDTyxNQUFSLENBQWVBLE1BQU0sQ0FBQ0EsTUFBdEIsRUFBOEJBLE1BQU0sQ0FBQ0MsV0FBckM7QUFDSCxDQUhEO0FBS0FSLE9BQU8sQ0FBQ1MsS0FBUixDQUFjQyxPQUFPLENBQUNDLElBQXRCO0FBRUEsTUFBTUMsVUFBVSxHQUFHWixPQUFPLENBQUNhLE1BQVIsR0FBaUIsNEJBQWViLE9BQU8sQ0FBQ2EsTUFBdkIsQ0FBakIsR0FBa0QsRUFBckU7QUFFQSxNQUFNQSxNQUFlLEdBQUcsMEJBQ3BCYixPQURvQixFQUNYO0FBQ1RZLFVBRm9CLEVBRVI7QUFDWkYsT0FBTyxDQUFDSSxHQUhZLEVBR1A7QUFDYlYsc0JBSm9CLENBSUo7QUFKSSxDQUF4QjtBQU9BLE1BQU1XLElBQUksR0FBRyxJQUFJQyxhQUFKLEVBQWI7QUFDQSxNQUFNQyxTQUFTLEdBQUdGLElBQUksQ0FBQ0csTUFBTCxDQUFZLFFBQVosQ0FBbEI7QUFDQUQsU0FBUyxDQUFDRSxLQUFWLENBQWdCLEtBQWhCLEVBQXVCTixNQUF2QjtBQUVBLE1BQU1PLE1BQU0sR0FBRyxJQUFJQyxlQUFKLENBQWU7QUFDMUJSLEVBQUFBLE1BRDBCO0FBRTFCRSxFQUFBQTtBQUYwQixDQUFmLENBQWY7O0FBS08sU0FBU08sSUFBVCxHQUFnQjtBQUNuQixHQUFDLFlBQVk7QUFDVCxRQUFJO0FBQ0EsWUFBTUYsTUFBTSxDQUFDRyxLQUFQLEVBQU47QUFDSCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ1pKLE1BQUFBLE1BQU0sQ0FBQ0ssR0FBUCxDQUFXRCxLQUFYLENBQWlCLFFBQWpCLEVBQTJCLE9BQTNCLEVBQW9DQSxLQUFwQztBQUNBZCxNQUFBQSxPQUFPLENBQUNnQixJQUFSLENBQWEsQ0FBYjtBQUNIO0FBQ0osR0FQRDtBQVFIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LTIwMjAgVE9OIERFViBTT0xVVElPTlMgTFRELlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBTT0ZUV0FSRSBFVkFMVUFUSU9OIExpY2Vuc2UgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxuICogdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXG4gKiBMaWNlbnNlIGF0OlxuICpcbiAqIGh0dHA6Ly93d3cudG9uLmRldi9saWNlbnNlc1xuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgVE9OIERFViBzb2Z0d2FyZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBAZmxvd1xuXG5pbXBvcnQgeyBjcmVhdGVDb25maWcsIHByb2dyYW1PcHRpb25zLCByZWFkQ29uZmlnRmlsZSB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB0eXBlIHsgUHJvZ3JhbU9wdGlvbiwgUUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBUT05RU2VydmVyIGZyb20gJy4vc2VydmVyJztcbmltcG9ydCBRTG9ncyBmcm9tICcuL2xvZ3MnO1xuXG5jb25zdCBwcm9ncmFtID0gcmVxdWlyZSgnY29tbWFuZGVyJyk7XG5cbk9iamVjdC52YWx1ZXMocHJvZ3JhbU9wdGlvbnMpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gKCh2YWx1ZTogYW55KTogUHJvZ3JhbU9wdGlvbik7XG4gICAgcHJvZ3JhbS5vcHRpb24ob3B0aW9uLm9wdGlvbiwgb3B0aW9uLmRlc2NyaXB0aW9uKTtcbn0pO1xuXG5wcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbmNvbnN0IGNvbmZpZ0RhdGEgPSBwcm9ncmFtLmNvbmZpZyA/IHJlYWRDb25maWdGaWxlKHByb2dyYW0uY29uZmlnKSA6IHt9O1xuXG5jb25zdCBjb25maWc6IFFDb25maWcgPSBjcmVhdGVDb25maWcoXG4gICAgcHJvZ3JhbSwgLy8gcHJvZ3JhbSBhcmdzXG4gICAgY29uZmlnRGF0YSwgLy8gY29uZmlnIGZpbGVcbiAgICBwcm9jZXNzLmVudiwgLy8gb3MgZW52c1xuICAgIHByb2dyYW1PcHRpb25zLCAvLyBkZWZhdWx0c1xuKTtcblxuY29uc3QgbG9ncyA9IG5ldyBRTG9ncygpO1xuY29uc3QgY29uZmlnTG9nID0gbG9ncy5jcmVhdGUoJ2NvbmZpZycpO1xuY29uZmlnTG9nLmRlYnVnKCdVU0UnLCBjb25maWcpO1xuXG5jb25zdCBzZXJ2ZXIgPSBuZXcgVE9OUVNlcnZlcih7XG4gICAgY29uZmlnLFxuICAgIGxvZ3MsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5zdGFydCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2VydmVyLmxvZy5lcnJvcignRkFJTEVEJywgJ1NUQVJUJywgZXJyb3IpO1xuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICB9XG4gICAgfSkoKTtcbn1cbiJdfQ==