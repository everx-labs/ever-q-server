"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolversMam = void 0;

var _blockchain = _interopRequireDefault(require("../data/blockchain"));

var _collection = require("../data/collection");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  version
} = (0, _utils.packageJson)();

// Query
function info() {
  return {
    version
  };
}

function stat(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  let totalWaitForCount = 0;
  let totalSubscriptionCount = 0;
  const collections = data.collections.map(collection => {
    totalWaitForCount += collection.waitForCount;
    totalSubscriptionCount += collection.subscriptionCount;
    return {
      name: collection.name,
      subscriptionCount: collection.subscriptionCount,
      waitForCount: collection.waitForCount,
      maxQueueSize: collection.maxQueueSize,
      subscriptions: [],
      waitFor: []
    };
  });
  return {
    waitForCount: totalWaitForCount,
    subscriptionCount: totalSubscriptionCount,
    collections
  };
}

async function getCollections(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  const data = context.data;
  const collections = [];

  for (const collection of data.collections) {
    const indexes = [];

    for (const index of await collection.getIndexes()) {
      indexes.push(index.fields.join(', '));
    }

    collections.push({
      name: collection.name,
      count: 0,
      indexes
    });
  }

  return collections;
}

async function dropCachedDbInfo(_parent, args, context) {
  (0, _collection.mamAccessRequired)(context, args);
  await context.data.dropCachedDbInfo();
  return true;
} // Mutation


const resolversMam = {
  Query: {
    info,
    getCollections,
    stat
  },
  Mutation: {
    dropCachedDbInfo
  }
};
exports.resolversMam = resolversMam;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2ZXIvZ3JhcGhxbC9yZXNvbHZlcnMtbWFtLmpzIl0sIm5hbWVzIjpbInZlcnNpb24iLCJpbmZvIiwic3RhdCIsIl9wYXJlbnQiLCJhcmdzIiwiY29udGV4dCIsImRhdGEiLCJ0b3RhbFdhaXRGb3JDb3VudCIsInRvdGFsU3Vic2NyaXB0aW9uQ291bnQiLCJjb2xsZWN0aW9ucyIsIm1hcCIsImNvbGxlY3Rpb24iLCJ3YWl0Rm9yQ291bnQiLCJzdWJzY3JpcHRpb25Db3VudCIsIm5hbWUiLCJtYXhRdWV1ZVNpemUiLCJzdWJzY3JpcHRpb25zIiwid2FpdEZvciIsImdldENvbGxlY3Rpb25zIiwiaW5kZXhlcyIsImluZGV4IiwiZ2V0SW5kZXhlcyIsInB1c2giLCJmaWVsZHMiLCJqb2luIiwiY291bnQiLCJkcm9wQ2FjaGVkRGJJbmZvIiwicmVzb2x2ZXJzTWFtIiwiUXVlcnkiLCJNdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUVBOzs7O0FBQ0EsTUFBTTtBQUFDQSxFQUFBQTtBQUFELElBQVkseUJBQWxCOztBQWlDQTtBQUVBLFNBQVNDLElBQVQsR0FBc0I7QUFDbEIsU0FBTztBQUNIRCxJQUFBQTtBQURHLEdBQVA7QUFHSDs7QUFFRCxTQUFTRSxJQUFULENBQWNDLE9BQWQsRUFBNEJDLElBQTVCLEVBQXVDQyxPQUF2QyxFQUErRTtBQUMzRSxxQ0FBa0JBLE9BQWxCLEVBQTJCRCxJQUEzQjtBQUNBLFFBQU1FLElBQXFCLEdBQUdELE9BQU8sQ0FBQ0MsSUFBdEM7QUFDQSxNQUFJQyxpQkFBaUIsR0FBRyxDQUF4QjtBQUNBLE1BQUlDLHNCQUFzQixHQUFHLENBQTdCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHSCxJQUFJLENBQUNHLFdBQUwsQ0FBaUJDLEdBQWpCLENBQXNCQyxVQUFELElBQWlDO0FBQ3RFSixJQUFBQSxpQkFBaUIsSUFBSUksVUFBVSxDQUFDQyxZQUFoQztBQUNBSixJQUFBQSxzQkFBc0IsSUFBSUcsVUFBVSxDQUFDRSxpQkFBckM7QUFDQSxXQUFPO0FBQ0hDLE1BQUFBLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQURkO0FBRUhELE1BQUFBLGlCQUFpQixFQUFFRixVQUFVLENBQUNFLGlCQUYzQjtBQUdIRCxNQUFBQSxZQUFZLEVBQUVELFVBQVUsQ0FBQ0MsWUFIdEI7QUFJSEcsTUFBQUEsWUFBWSxFQUFFSixVQUFVLENBQUNJLFlBSnRCO0FBS0hDLE1BQUFBLGFBQWEsRUFBRSxFQUxaO0FBTUhDLE1BQUFBLE9BQU8sRUFBRTtBQU5OLEtBQVA7QUFRSCxHQVhtQixDQUFwQjtBQVlBLFNBQU87QUFDSEwsSUFBQUEsWUFBWSxFQUFFTCxpQkFEWDtBQUVITSxJQUFBQSxpQkFBaUIsRUFBRUwsc0JBRmhCO0FBR0hDLElBQUFBO0FBSEcsR0FBUDtBQUtIOztBQUVELGVBQWVTLGNBQWYsQ0FBOEJmLE9BQTlCLEVBQTRDQyxJQUE1QyxFQUF1REMsT0FBdkQsRUFBdUg7QUFDbkgscUNBQWtCQSxPQUFsQixFQUEyQkQsSUFBM0I7QUFDQSxRQUFNRSxJQUFxQixHQUFHRCxPQUFPLENBQUNDLElBQXRDO0FBQ0EsUUFBTUcsV0FBZ0MsR0FBRyxFQUF6Qzs7QUFDQSxPQUFLLE1BQU1FLFVBQVgsSUFBeUJMLElBQUksQ0FBQ0csV0FBOUIsRUFBMkM7QUFDdkMsVUFBTVUsT0FBaUIsR0FBRyxFQUExQjs7QUFDQSxTQUFLLE1BQU1DLEtBQVgsSUFBb0IsTUFBTVQsVUFBVSxDQUFDVSxVQUFYLEVBQTFCLEVBQW1EO0FBQy9DRixNQUFBQSxPQUFPLENBQUNHLElBQVIsQ0FBYUYsS0FBSyxDQUFDRyxNQUFOLENBQWFDLElBQWIsQ0FBa0IsSUFBbEIsQ0FBYjtBQUNIOztBQUNEZixJQUFBQSxXQUFXLENBQUNhLElBQVosQ0FBaUI7QUFDYlIsTUFBQUEsSUFBSSxFQUFFSCxVQUFVLENBQUNHLElBREo7QUFFYlcsTUFBQUEsS0FBSyxFQUFFLENBRk07QUFHYk4sTUFBQUE7QUFIYSxLQUFqQjtBQUtIOztBQUNELFNBQU9WLFdBQVA7QUFDSDs7QUFFRCxlQUFlaUIsZ0JBQWYsQ0FBZ0N2QixPQUFoQyxFQUE4Q0MsSUFBOUMsRUFBeURDLE9BQXpELEVBQTZHO0FBQ3pHLHFDQUFrQkEsT0FBbEIsRUFBMkJELElBQTNCO0FBQ0EsUUFBTUMsT0FBTyxDQUFDQyxJQUFSLENBQWFvQixnQkFBYixFQUFOO0FBQ0EsU0FBTyxJQUFQO0FBQ0gsQyxDQUVEOzs7QUFFTyxNQUFNQyxZQUFZLEdBQUc7QUFDeEJDLEVBQUFBLEtBQUssRUFBRTtBQUNIM0IsSUFBQUEsSUFERztBQUVIaUIsSUFBQUEsY0FGRztBQUdIaEIsSUFBQUE7QUFIRyxHQURpQjtBQU14QjJCLEVBQUFBLFFBQVEsRUFBRTtBQUNOSCxJQUFBQTtBQURNO0FBTmMsQ0FBckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUUJsb2NrY2hhaW5EYXRhIGZyb20gXCIuLi9kYXRhL2Jsb2NrY2hhaW5cIjtcbmltcG9ydCB7IFFEYXRhQ29sbGVjdGlvbiwgbWFtQWNjZXNzUmVxdWlyZWQgfSBmcm9tIFwiLi4vZGF0YS9jb2xsZWN0aW9uXCI7XG5pbXBvcnQgdHlwZSB7IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4IH0gZnJvbSBcIi4vcmVzb2x2ZXJzLWN1c3RvbVwiO1xuaW1wb3J0IHtwYWNrYWdlSnNvbn0gZnJvbSAnLi4vdXRpbHMnO1xuY29uc3Qge3ZlcnNpb259ID0gcGFja2FnZUpzb24oKTtcblxudHlwZSBJbmZvID0ge1xuICAgIHZlcnNpb246IHN0cmluZyxcbn1cblxudHlwZSBMaXN0ZW5lclN0YXQgPSB7XG4gICAgZmlsdGVyOiBzdHJpbmcsXG4gICAgc2VsZWN0aW9uOiBzdHJpbmcsXG4gICAgcXVldWVTaXplOiBudW1iZXIsXG4gICAgZXZlbnRDb3VudDogbnVtYmVyLFxuICAgIHNlY29uZHNBY3RpdmU6IG51bWJlcixcbn1cblxudHlwZSBDb2xsZWN0aW9uU3RhdCA9IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc3Vic2NyaXB0aW9uQ291bnQ6IG51bWJlcixcbiAgICB3YWl0Rm9yQ291bnQ6IG51bWJlcixcbiAgICBtYXhRdWV1ZVNpemU6IG51bWJlcixcbiAgICBzdWJzY3JpcHRpb25zOiBMaXN0ZW5lclN0YXRbXSxcbiAgICB3YWl0Rm9yOiBMaXN0ZW5lclN0YXRbXSxcbn1cblxudHlwZSBTdGF0ID0ge1xuICAgIGNvbGxlY3Rpb25zOiBDb2xsZWN0aW9uU3RhdFtdXG59XG5cbnR5cGUgQ29sbGVjdGlvblN1bW1hcnkgPSB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGNvdW50OiBudW1iZXIsXG4gICAgaW5kZXhlczogc3RyaW5nW10sXG59XG5cbi8vIFF1ZXJ5XG5cbmZ1bmN0aW9uIGluZm8oKTogSW5mbyB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbixcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzdGF0KF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFN0YXQge1xuICAgIG1hbUFjY2Vzc1JlcXVpcmVkKGNvbnRleHQsIGFyZ3MpO1xuICAgIGNvbnN0IGRhdGE6IFFCbG9ja2NoYWluRGF0YSA9IGNvbnRleHQuZGF0YTtcbiAgICBsZXQgdG90YWxXYWl0Rm9yQ291bnQgPSAwO1xuICAgIGxldCB0b3RhbFN1YnNjcmlwdGlvbkNvdW50ID0gMDtcbiAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGRhdGEuY29sbGVjdGlvbnMubWFwKChjb2xsZWN0aW9uOiBRRGF0YUNvbGxlY3Rpb24pID0+IHtcbiAgICAgICAgdG90YWxXYWl0Rm9yQ291bnQgKz0gY29sbGVjdGlvbi53YWl0Rm9yQ291bnQ7XG4gICAgICAgIHRvdGFsU3Vic2NyaXB0aW9uQ291bnQgKz0gY29sbGVjdGlvbi5zdWJzY3JpcHRpb25Db3VudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbkNvdW50OiBjb2xsZWN0aW9uLnN1YnNjcmlwdGlvbkNvdW50LFxuICAgICAgICAgICAgd2FpdEZvckNvdW50OiBjb2xsZWN0aW9uLndhaXRGb3JDb3VudCxcbiAgICAgICAgICAgIG1heFF1ZXVlU2l6ZTogY29sbGVjdGlvbi5tYXhRdWV1ZVNpemUsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zOiBbXSxcbiAgICAgICAgICAgIHdhaXRGb3I6IFtdLFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2FpdEZvckNvdW50OiB0b3RhbFdhaXRGb3JDb3VudCxcbiAgICAgICAgc3Vic2NyaXB0aW9uQ291bnQ6IHRvdGFsU3Vic2NyaXB0aW9uQ291bnQsXG4gICAgICAgIGNvbGxlY3Rpb25zLFxuICAgIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25zKF9wYXJlbnQ6IGFueSwgYXJnczogYW55LCBjb250ZXh0OiBHcmFwaFFMUmVxdWVzdENvbnRleHRFeCk6IFByb21pc2U8Q29sbGVjdGlvblN1bW1hcnlbXT4ge1xuICAgIG1hbUFjY2Vzc1JlcXVpcmVkKGNvbnRleHQsIGFyZ3MpO1xuICAgIGNvbnN0IGRhdGE6IFFCbG9ja2NoYWluRGF0YSA9IGNvbnRleHQuZGF0YTtcbiAgICBjb25zdCBjb2xsZWN0aW9uczogQ29sbGVjdGlvblN1bW1hcnlbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgY29sbGVjdGlvbiBvZiBkYXRhLmNvbGxlY3Rpb25zKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgYXdhaXQgY29sbGVjdGlvbi5nZXRJbmRleGVzKCkpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleC5maWVsZHMuam9pbignLCAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29sbGVjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBjb2xsZWN0aW9uLm5hbWUsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIGluZGV4ZXMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbnM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRyb3BDYWNoZWREYkluZm8oX3BhcmVudDogYW55LCBhcmdzOiBhbnksIGNvbnRleHQ6IEdyYXBoUUxSZXF1ZXN0Q29udGV4dEV4KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbWFtQWNjZXNzUmVxdWlyZWQoY29udGV4dCwgYXJncyk7XG4gICAgYXdhaXQgY29udGV4dC5kYXRhLmRyb3BDYWNoZWREYkluZm8oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gTXV0YXRpb25cblxuZXhwb3J0IGNvbnN0IHJlc29sdmVyc01hbSA9IHtcbiAgICBRdWVyeToge1xuICAgICAgICBpbmZvLFxuICAgICAgICBnZXRDb2xsZWN0aW9ucyxcbiAgICAgICAgc3RhdFxuICAgIH0sXG4gICAgTXV0YXRpb246IHtcbiAgICAgICAgZHJvcENhY2hlZERiSW5mbyxcbiAgICB9XG59O1xuIl19