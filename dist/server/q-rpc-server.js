"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QRpcServer = void 0;

var _ws = _interopRequireDefault(require("ws"));

var _arango = _interopRequireDefault(require("./arango"));

var _arangoCollection = require("./arango-collection");

var _auth = require("./auth");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class QRpcServer {
  constructor(options) {
    this.db = options.db;
    this.auth = options.auth;
    this.resolvers = new Map();
    this.db.collections.forEach(c => {
      this.resolvers.set(c.name, c.queryResolver());
    });
    this.port = options.port || 0;
  }

  start() {
    if (this.port === 0) {
      throw new Error('QRpcServer port hasn\'t specified');
    }

    this.wss = new _ws.default.Server({
      port: this.port
    });
    this.wss.on('connection', (ws, req) => {
      const connection = {
        socket: ws,
        remoteAddress: req.connection.remoteAddress
      };
      ws.on('close', () => {});
      ws.on('message', data => {
        (async () => {
          try {
            await this.rpc(connection, data);
          } catch (error) {
            console.error(error);
          }
        })();
      });
    });
  }

  async rpc(connection, data) {
    const request = JSON.parse(data);
    let response;

    try {
      response = {
        jsonrpc: '2.0',
        id: request.id,
        result: await this.dispatch(connection, request.method, request.params)
      };
    } catch (error) {
      response = {
        jsonrpc: '2.0',
        id: request.id,
        error: {
          code: error.code || 500,
          message: error.message
        }
      };
    }

    connection.socket.send(JSON.stringify(response));
  }

  async dispatch(connection, method, params) {
    switch (method) {
      case 'transactions':
      case 'accounts':
      case 'blocks':
      case 'messages':
      case 'block_signatures':
        return this.query(connection, this.db.collectionsByName.get(method), params);

      default:
        throw new Error(`Unknown method [${method}]`);
    }
  }

  async query(connection, collection, params) {
    const resolver = this.resolvers.get(collection.name);
    const docs = await resolver(null, params, {
      auth: this.auth,
      remoteAddress: connection.remoteAddress
    }, {
      operation: {
        selectionSet: params.selection
      }
    });
    return docs;
  }

}

exports.QRpcServer = QRpcServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,