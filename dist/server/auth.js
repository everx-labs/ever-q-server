"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Auth = exports.deniedAccess = exports.grantedAccess = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const grantedAccess = Object.freeze({
  granted: true,
  restrictToAccounts: []
});
exports.grantedAccess = grantedAccess;
const deniedAccess = Object.freeze({
  granted: false,
  restrictToAccounts: []
});
exports.deniedAccess = deniedAccess;

class Auth {
  constructor(config) {
    this.config = config;
  }

  static extractAccessKey(req, connection) {
    return req && req.headers && (req.headers.accessKey || req.headers.accesskey) || connection && connection.context && connection.context.accessKey;
  }

  static unauthorizedError() {
    return _utils.QError.unauthorized();
  }

  authServiceRequired() {
    if (!this.config.authorization.endpoint) {
      throw _utils.QError.authServiceUnavailable();
    }
  }

  async requireGrantedAccess(accessKey) {
    const access = await this.getAccessRights(accessKey);

    if (!access.granted) {
      throw Auth.unauthorizedError();
    }

    return access;
  }

  async getAccessRights(accessKey) {
    if (!this.config.authorization.endpoint) {
      return grantedAccess;
    }

    if ((accessKey || '') === '') {
      return deniedAccess;
    }

    const rights = await this.invokeAuth('getAccessRights', {
      accessKey
    });

    if (!rights.restrictToAccounts) {
      rights.restrictToAccounts = [];
    }

    return rights;
  }

  async getManagementAccessKey() {
    this.authServiceRequired();
    return this.invokeAuth('getManagementAccessKey', {});
  }

  async registerAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('registerAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async revokeAccessKeys(account, keys, signedManagementAccessKey) {
    this.authServiceRequired();
    return this.invokeAuth('revokeAccessKeys', {
      account,
      keys,
      signedManagementAccessKey
    });
  }

  async invokeAuth(method, params) {
    const res = await (0, _nodeFetch.default)(this.config.authorization.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        jsonrpc: '2.0',
        id: '1',
        method,
        params
      })
    });

    if (res.status !== 200) {
      throw new Error(`Auth service failed: ${await res.text()}`);
    }

    const response = await res.json();

    if (response.error) {
      throw _utils.QError.auth(response.error);
    }

    return response.result;
  }

}

exports.Auth = Auth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,