input StringFilter {
	eq: String
	ne: String
	gt: String
	lt: String
	ge: String
	le: String
	in: [String]
	notIn: [String]
}

input BooleanFilter {
	eq: Boolean
	ne: Boolean
	gt: Boolean
	lt: Boolean
	ge: Boolean
	le: Boolean
	in: [Boolean]
	notIn: [Boolean]
}

input IntFilter {
	eq: Int
	ne: Int
	gt: Int
	lt: Int
	ge: Int
	le: Int
	in: [Int]
	notIn: [Int]
}

input FloatFilter {
	eq: Float
	ne: Float
	gt: Float
	lt: Float
	ge: Float
	le: Float
	in: [Float]
	notIn: [Float]
}

type None {
	None: String
}

type CurrencyCollection {
	Grams: String
}

type IntermediateAddressRegular {
	use_src_bits: Int
}

type IntermediateAddressSimple {
	workchain_id: Int
	addr_pfx: String
}

type IntermediateAddressExt {
	workchain_id: Int
	addr_pfx: String
}

type IntermediateAddressRegularVariant {
    Regular: IntermediateAddressRegular
}

type IntermediateAddressSimpleVariant {
    Simple: IntermediateAddressSimple
}

type IntermediateAddressExtVariant {
    Ext: IntermediateAddressExt
}

union IntermediateAddress = 
	| IntermediateAddressRegularVariant
	| IntermediateAddressSimpleVariant
	| IntermediateAddressExtVariant


type ExtBlkRef {
	end_lt: Float
	seq_no: Int
	root_hash: String
	file_hash: String
}

type MsgAddressIntAddrStdAnycast {
	rewrite_pfx: String
}

type MsgAddressIntAddrStd {
	anycast: MsgAddressIntAddrStdAnycast
	workchain_id: Int
	address: String
}

type MsgAddressIntAddrVarAnycast {
	rewrite_pfx: String
}

type MsgAddressIntAddrVar {
	anycast: MsgAddressIntAddrVarAnycast
	workchain_id: Int
	address: String
}

type MsgAddressIntAddrNoneVariant {
    AddrNone: None
}

type MsgAddressIntAddrStdVariant {
    AddrStd: MsgAddressIntAddrStd
}

type MsgAddressIntAddrVarVariant {
    AddrVar: MsgAddressIntAddrVar
}

union MsgAddressInt = 
	| MsgAddressIntAddrNoneVariant
	| MsgAddressIntAddrStdVariant
	| MsgAddressIntAddrVarVariant


type TickTock {
	tick: Boolean
	tock: Boolean
}

type StorageUsedShort {
	cells: Int
	bits: Int
}

type SplitMergeInfo {
	cur_shard_pfx_len: Int
	acc_split_depth: Int
	this_addr: String
	sibling_addr: String
}

type MsgAddressExtAddrExtern {
	AddrExtern: String
}

type MsgAddressExtAddrNoneVariant {
    AddrNone: None
}

type MsgAddressExtAddrExternVariant {
    AddrExtern: MsgAddressExtAddrExtern
}

union MsgAddressExt = 
	| MsgAddressExtAddrNoneVariant
	| MsgAddressExtAddrExternVariant


type MessageHeaderIntMsgInfo {
	ihr_disabled: Boolean
	bounce: Boolean
	bounced: Boolean
	src: MsgAddressInt
	dst: MsgAddressInt
	value: CurrencyCollection
	ihr_fee: Int
	fwd_fee: Int
	created_lt: Float
	created_at: Int
}

type MessageHeaderExtInMsgInfo {
	src: MsgAddressExt
	dst: MsgAddressInt
	import_fee: Int
}

type MessageHeaderExtOutMsgInfo {
	src: MsgAddressInt
	dst: MsgAddressExt
	created_lt: Float
	created_at: Int
}

type MessageHeaderIntMsgInfoVariant {
    IntMsgInfo: MessageHeaderIntMsgInfo
}

type MessageHeaderExtInMsgInfoVariant {
    ExtInMsgInfo: MessageHeaderExtInMsgInfo
}

type MessageHeaderExtOutMsgInfoVariant {
    ExtOutMsgInfo: MessageHeaderExtOutMsgInfo
}

union MessageHeader = 
	| MessageHeaderIntMsgInfoVariant
	| MessageHeaderExtInMsgInfoVariant
	| MessageHeaderExtOutMsgInfoVariant


type MessageInit {
	split_depth: Int
	special: TickTock
	code: String
	data: String
	library: String
}

type Message {
	id: String
	transaction_id: String
	block_id: String
	header: MessageHeader
	init: MessageInit
	body: String
	status: String
}

type MsgEnvelope {
	msg: String
	next_addr: IntermediateAddress
	cur_addr: IntermediateAddress
	fwd_fee_remaining: CurrencyCollection
}

type InMsgExternal {
	msg: String
	transaction: String
}

type InMsgIHR {
	msg: String
	transaction: String
	ihr_fee: Int
	proof_created: String
}

type InMsgImmediatelly {
	in_msg: MsgEnvelope
	fwd_fee: Int
	transaction: String
}

type InMsgFinal {
	in_msg: MsgEnvelope
	fwd_fee: Int
	transaction: String
}

type InMsgTransit {
	in_msg: MsgEnvelope
	out_msg: MsgEnvelope
	transit_fee: Int
}

type InMsgDiscardedFinal {
	in_msg: MsgEnvelope
	transaction_id: Float
	fwd_fee: Int
}

type InMsgDiscardedTransit {
	in_msg: MsgEnvelope
	transaction_id: Float
	fwd_fee: Int
	proof_delivered: String
}

type InMsgExternalVariant {
    External: InMsgExternal
}

type InMsgIHRVariant {
    IHR: InMsgIHR
}

type InMsgImmediatellyVariant {
    Immediatelly: InMsgImmediatelly
}

type InMsgFinalVariant {
    Final: InMsgFinal
}

type InMsgTransitVariant {
    Transit: InMsgTransit
}

type InMsgDiscardedFinalVariant {
    DiscardedFinal: InMsgDiscardedFinal
}

type InMsgDiscardedTransitVariant {
    DiscardedTransit: InMsgDiscardedTransit
}

union InMsg = 
	| InMsgExternalVariant
	| InMsgIHRVariant
	| InMsgImmediatellyVariant
	| InMsgFinalVariant
	| InMsgTransitVariant
	| InMsgDiscardedFinalVariant
	| InMsgDiscardedTransitVariant


type OutMsgExternal {
	msg: String
	transaction: String
}

type OutMsgImmediately {
	out_msg: MsgEnvelope
	transaction: String
	reimport: InMsg
}

type OutMsgOutMsgNew {
	out_msg: MsgEnvelope
	transaction: String
}

type OutMsgTransit {
	out_msg: MsgEnvelope
	imported: InMsg
}

type OutMsgDequeue {
	out_msg: MsgEnvelope
	import_block_lt: Float
}

type OutMsgTransitRequired {
	out_msg: MsgEnvelope
	imported: InMsg
}

type OutMsgNoneVariant {
    None: None
}

type OutMsgExternalVariant {
    External: OutMsgExternal
}

type OutMsgImmediatelyVariant {
    Immediately: OutMsgImmediately
}

type OutMsgOutMsgNewVariant {
    OutMsgNew: OutMsgOutMsgNew
}

type OutMsgTransitVariant {
    Transit: OutMsgTransit
}

type OutMsgDequeueVariant {
    Dequeue: OutMsgDequeue
}

type OutMsgTransitRequiredVariant {
    TransitRequired: OutMsgTransitRequired
}

union OutMsg = 
	| OutMsgNoneVariant
	| OutMsgExternalVariant
	| OutMsgImmediatelyVariant
	| OutMsgOutMsgNewVariant
	| OutMsgTransitVariant
	| OutMsgDequeueVariant
	| OutMsgTransitRequiredVariant


type BlockInfoPrevRefPrev {
	seq_no: Int
	file_hash: String
	root_hash: String
	end_lt: Int
}

type BlockInfoPrevRef {
	prev: BlockInfoPrevRefPrev
}

type BlockInfoShard {
	shard_pfx_bits: Int
	workchain_id: Int
	shard_prefix: String
}

type BlockInfoMasterRef {
	master: ExtBlkRef
}

type BlockInfoPrevVertRef {
	prev: ExtBlkRef
	prev_alt: ExtBlkRef
}

type BlockInfo {
	want_split: Boolean
	seq_no: Int
	after_merge: Boolean
	gen_utime: Int
	gen_catchain_seqno: Int
	flags: Int
	prev_ref: BlockInfoPrevRef
	version: Int
	gen_validator_list_hash_short: Int
	before_split: Boolean
	after_split: Boolean
	want_merge: Boolean
	vert_seq_no: Int
	start_lt: Float
	end_lt: Float
	shard: BlockInfoShard
	min_ref_mc_seqno: Int
	master_ref: BlockInfoMasterRef
	prev_vert_ref: BlockInfoPrevVertRef
}

type BlockValueFlow {
	to_next_blk: CurrencyCollection
	exported: CurrencyCollection
	fees_collected: CurrencyCollection
	created: CurrencyCollection
	imported: CurrencyCollection
	from_prev_blk: CurrencyCollection
	minted: CurrencyCollection
	fees_imported: CurrencyCollection
}

type BlockExtraAccountBlocksStateUpdate {
	old_hash: String
	new_hash: String
}

type BlockExtraAccountBlocks {
	account_addr: String
	transactions: [String]
	state_update: BlockExtraAccountBlocksStateUpdate
	tr_count: Int
}

type BlockExtra {
	in_msg_descr: [InMsg]
	rand_seed: String
	out_msg_descr: [OutMsg]
	account_blocks: [BlockExtraAccountBlocks]
}

type BlockStateUpdate {
	new: String
	new_hash: String
	new_depth: Int
	old: String
	old_hash: String
	old_depth: Int
}

type Block {
	id: String
	status: String
	global_id: Int
	info: BlockInfo
	value_flow: BlockValueFlow
	extra: BlockExtra
	state_update: BlockStateUpdate
}

type AccountStorageStatUsed {
	cells: Int
	bits: Int
	public_cells: Int
}

type AccountStorageStat {
	used: AccountStorageStatUsed
	last_paid: Int
	due_payment: Int
}

type AccountStorageStateAccountActive {
	split_depth: Int
	special: TickTock
	code: String
	data: String
	library: String
}

type AccountStorageStateAccountUninitVariant {
    AccountUninit: None
}

type AccountStorageStateAccountActiveVariant {
    AccountActive: AccountStorageStateAccountActive
}

type AccountStorageStateAccountFrozenVariant {
    AccountFrozen: None
}

union AccountStorageState = 
	| AccountStorageStateAccountUninitVariant
	| AccountStorageStateAccountActiveVariant
	| AccountStorageStateAccountFrozenVariant


type AccountStorage {
	last_trans_lt: Float
	balance: CurrencyCollection
	state: AccountStorageState
}

type Account {
	id: String
	_key: String
	storage_stat: AccountStorageStat
	storage: AccountStorage
	addr: MsgAddressInt
}

type TransactionStateUpdate {
	old_hash: String
	new_hash: String
}

type TrStoragePhase {
	storage_fees_collected: Int
	storage_fees_due: Int
	status_change: String
}

type TrCreditPhase {
	due_fees_collected: Int
	credit: CurrencyCollection
}

type TrComputePhaseSkipped {
	reason: String
}

type TrComputePhaseVm {
	success: Boolean
	msg_state_used: Boolean
	account_activated: Boolean
	gas_fees: Int
	gas_used: Int
	gas_limit: Int
	gas_credit: Int
	mode: Int
	exit_code: Int
	exit_arg: Int
	vm_steps: Int
	vm_init_state_hash: String
	vm_final_state_hash: String
}

type TrComputePhaseSkippedVariant {
    Skipped: TrComputePhaseSkipped
}

type TrComputePhaseVmVariant {
    Vm: TrComputePhaseVm
}

union TrComputePhase = 
	| TrComputePhaseSkippedVariant
	| TrComputePhaseVmVariant


type TrActionPhase {
	success: Boolean
	valid: Boolean
	no_funds: Boolean
	status_change: String
	total_fwd_fees: Int
	total_action_fees: Int
	result_code: Int
	result_arg: Int
	tot_actions: Int
	spec_actions: Int
	skipped_actions: Int
	msgs_created: Int
	action_list_hash: String
	tot_msg_size: StorageUsedShort
}

type TrBouncePhaseNofunds {
	msg_size: StorageUsedShort
	req_fwd_fees: Int
}

type TrBouncePhaseOk {
	msg_size: StorageUsedShort
	msg_fees: Int
	fwd_fees: Int
}

type TrBouncePhaseNegfundsVariant {
    Negfunds: None
}

type TrBouncePhaseNofundsVariant {
    Nofunds: TrBouncePhaseNofunds
}

type TrBouncePhaseOkVariant {
    Ok: TrBouncePhaseOk
}

union TrBouncePhase = 
	| TrBouncePhaseNegfundsVariant
	| TrBouncePhaseNofundsVariant
	| TrBouncePhaseOkVariant


type TransactionDescriptionOrdinary {
	credit_first: Boolean
	storage_ph: TrStoragePhase
	credit_ph: TrCreditPhase
	compute_ph: TrComputePhase
	action: TrActionPhase
	aborted: Boolean
	bounce: TrBouncePhase
	destroyed: Boolean
}

type TransactionDescriptionTickTock {
	tt: String
	storage: TrStoragePhase
	compute_ph: TrComputePhase
	action: TrActionPhase
	aborted: Boolean
	destroyed: Boolean
}

type TransactionDescriptionSplitPrepare {
	split_info: SplitMergeInfo
	compute_ph: TrComputePhase
	action: TrActionPhase
	aborted: Boolean
	destroyed: Boolean
}

type TransactionDescriptionSplitInstall {
	split_info: SplitMergeInfo
	prepare_transaction: String
	installed: Boolean
}

type TransactionDescriptionMergePrepare {
	split_info: SplitMergeInfo
	storage_ph: TrStoragePhase
	aborted: Boolean
}

type TransactionDescriptionMergeInstall {
	split_info: SplitMergeInfo
	prepare_transaction: String
	credit_ph: TrCreditPhase
	compute_ph: TrComputePhase
	action: TrActionPhase
	aborted: Boolean
	destroyed: Boolean
}

type TransactionDescriptionOrdinaryVariant {
    Ordinary: TransactionDescriptionOrdinary
}

type TransactionDescriptionStorageVariant {
    Storage: TrStoragePhase
}

type TransactionDescriptionTickTockVariant {
    TickTock: TransactionDescriptionTickTock
}

type TransactionDescriptionSplitPrepareVariant {
    SplitPrepare: TransactionDescriptionSplitPrepare
}

type TransactionDescriptionSplitInstallVariant {
    SplitInstall: TransactionDescriptionSplitInstall
}

type TransactionDescriptionMergePrepareVariant {
    MergePrepare: TransactionDescriptionMergePrepare
}

type TransactionDescriptionMergeInstallVariant {
    MergeInstall: TransactionDescriptionMergeInstall
}

union TransactionDescription = 
	| TransactionDescriptionOrdinaryVariant
	| TransactionDescriptionStorageVariant
	| TransactionDescriptionTickTockVariant
	| TransactionDescriptionSplitPrepareVariant
	| TransactionDescriptionSplitInstallVariant
	| TransactionDescriptionMergePrepareVariant
	| TransactionDescriptionMergeInstallVariant


type Transaction {
	id: String
	block_id: String
	status: String
	account_addr: String
	lt: Float
	last_trans_lt: Float
	prev_trans_hash: String
	prev_trans_lt: Float
	now: Int
	outmsg_cnt: Int
	orig_status: String
	end_status: String
	in_msg: String
	in_message: Message
	out_msgs: [String]
	out_messages: [Message]
	total_fees: Int
	state_update: TransactionStateUpdate
	description: TransactionDescription
	root_cell: String
}

input NoneFilter {
	None: StringFilter
}

input CurrencyCollectionFilter {
	Grams: StringFilter
}

input IntermediateAddressRegularFilter {
	use_src_bits: IntFilter
}

input IntermediateAddressSimpleFilter {
	workchain_id: IntFilter
	addr_pfx: StringFilter
}

input IntermediateAddressExtFilter {
	workchain_id: IntFilter
	addr_pfx: StringFilter
}

input IntermediateAddressFilter {
	Regular: IntermediateAddressRegularFilter
	Simple: IntermediateAddressSimpleFilter
	Ext: IntermediateAddressExtFilter
}

input ExtBlkRefFilter {
	end_lt: FloatFilter
	seq_no: IntFilter
	root_hash: StringFilter
	file_hash: StringFilter
}

input MsgAddressIntAddrStdAnycastFilter {
	rewrite_pfx: StringFilter
}

input MsgAddressIntAddrStdFilter {
	anycast: MsgAddressIntAddrStdAnycastFilter
	workchain_id: IntFilter
	address: StringFilter
}

input MsgAddressIntAddrVarAnycastFilter {
	rewrite_pfx: StringFilter
}

input MsgAddressIntAddrVarFilter {
	anycast: MsgAddressIntAddrVarAnycastFilter
	workchain_id: IntFilter
	address: StringFilter
}

input MsgAddressIntFilter {
	AddrNone: NoneFilter
	AddrStd: MsgAddressIntAddrStdFilter
	AddrVar: MsgAddressIntAddrVarFilter
}

input TickTockFilter {
	tick: BooleanFilter
	tock: BooleanFilter
}

input StorageUsedShortFilter {
	cells: IntFilter
	bits: IntFilter
}

input SplitMergeInfoFilter {
	cur_shard_pfx_len: IntFilter
	acc_split_depth: IntFilter
	this_addr: StringFilter
	sibling_addr: StringFilter
}

input MsgAddressExtAddrExternFilter {
	AddrExtern: StringFilter
}

input MsgAddressExtFilter {
	AddrNone: NoneFilter
	AddrExtern: MsgAddressExtAddrExternFilter
}

input MessageHeaderIntMsgInfoFilter {
	ihr_disabled: BooleanFilter
	bounce: BooleanFilter
	bounced: BooleanFilter
	src: MsgAddressIntFilter
	dst: MsgAddressIntFilter
	value: CurrencyCollectionFilter
	ihr_fee: IntFilter
	fwd_fee: IntFilter
	created_lt: FloatFilter
	created_at: IntFilter
}

input MessageHeaderExtInMsgInfoFilter {
	src: MsgAddressExtFilter
	dst: MsgAddressIntFilter
	import_fee: IntFilter
}

input MessageHeaderExtOutMsgInfoFilter {
	src: MsgAddressIntFilter
	dst: MsgAddressExtFilter
	created_lt: FloatFilter
	created_at: IntFilter
}

input MessageHeaderFilter {
	IntMsgInfo: MessageHeaderIntMsgInfoFilter
	ExtInMsgInfo: MessageHeaderExtInMsgInfoFilter
	ExtOutMsgInfo: MessageHeaderExtOutMsgInfoFilter
}

input MessageInitFilter {
	split_depth: IntFilter
	special: TickTockFilter
	code: StringFilter
	data: StringFilter
	library: StringFilter
}

input MessageFilter {
	id: StringFilter
	transaction_id: StringFilter
	block_id: StringFilter
	header: MessageHeaderFilter
	init: MessageInitFilter
	body: StringFilter
	status: StringFilter
}

input MsgEnvelopeFilter {
	msg: StringFilter
	next_addr: IntermediateAddressFilter
	cur_addr: IntermediateAddressFilter
	fwd_fee_remaining: CurrencyCollectionFilter
}

input InMsgExternalFilter {
	msg: StringFilter
	transaction: StringFilter
}

input InMsgIHRFilter {
	msg: StringFilter
	transaction: StringFilter
	ihr_fee: IntFilter
	proof_created: StringFilter
}

input InMsgImmediatellyFilter {
	in_msg: MsgEnvelopeFilter
	fwd_fee: IntFilter
	transaction: StringFilter
}

input InMsgFinalFilter {
	in_msg: MsgEnvelopeFilter
	fwd_fee: IntFilter
	transaction: StringFilter
}

input InMsgTransitFilter {
	in_msg: MsgEnvelopeFilter
	out_msg: MsgEnvelopeFilter
	transit_fee: IntFilter
}

input InMsgDiscardedFinalFilter {
	in_msg: MsgEnvelopeFilter
	transaction_id: FloatFilter
	fwd_fee: IntFilter
}

input InMsgDiscardedTransitFilter {
	in_msg: MsgEnvelopeFilter
	transaction_id: FloatFilter
	fwd_fee: IntFilter
	proof_delivered: StringFilter
}

input InMsgFilter {
	External: InMsgExternalFilter
	IHR: InMsgIHRFilter
	Immediatelly: InMsgImmediatellyFilter
	Final: InMsgFinalFilter
	Transit: InMsgTransitFilter
	DiscardedFinal: InMsgDiscardedFinalFilter
	DiscardedTransit: InMsgDiscardedTransitFilter
}

input OutMsgExternalFilter {
	msg: StringFilter
	transaction: StringFilter
}

input OutMsgImmediatelyFilter {
	out_msg: MsgEnvelopeFilter
	transaction: StringFilter
	reimport: InMsgFilter
}

input OutMsgOutMsgNewFilter {
	out_msg: MsgEnvelopeFilter
	transaction: StringFilter
}

input OutMsgTransitFilter {
	out_msg: MsgEnvelopeFilter
	imported: InMsgFilter
}

input OutMsgDequeueFilter {
	out_msg: MsgEnvelopeFilter
	import_block_lt: FloatFilter
}

input OutMsgTransitRequiredFilter {
	out_msg: MsgEnvelopeFilter
	imported: InMsgFilter
}

input OutMsgFilter {
	None: NoneFilter
	External: OutMsgExternalFilter
	Immediately: OutMsgImmediatelyFilter
	OutMsgNew: OutMsgOutMsgNewFilter
	Transit: OutMsgTransitFilter
	Dequeue: OutMsgDequeueFilter
	TransitRequired: OutMsgTransitRequiredFilter
}

input BlockInfoPrevRefPrevFilter {
	seq_no: IntFilter
	file_hash: StringFilter
	root_hash: StringFilter
	end_lt: IntFilter
}

input BlockInfoPrevRefFilter {
	prev: BlockInfoPrevRefPrevFilter
}

input BlockInfoShardFilter {
	shard_pfx_bits: IntFilter
	workchain_id: IntFilter
	shard_prefix: StringFilter
}

input BlockInfoMasterRefFilter {
	master: ExtBlkRefFilter
}

input BlockInfoPrevVertRefFilter {
	prev: ExtBlkRefFilter
	prev_alt: ExtBlkRefFilter
}

input BlockInfoFilter {
	want_split: BooleanFilter
	seq_no: IntFilter
	after_merge: BooleanFilter
	gen_utime: IntFilter
	gen_catchain_seqno: IntFilter
	flags: IntFilter
	prev_ref: BlockInfoPrevRefFilter
	version: IntFilter
	gen_validator_list_hash_short: IntFilter
	before_split: BooleanFilter
	after_split: BooleanFilter
	want_merge: BooleanFilter
	vert_seq_no: IntFilter
	start_lt: FloatFilter
	end_lt: FloatFilter
	shard: BlockInfoShardFilter
	min_ref_mc_seqno: IntFilter
	master_ref: BlockInfoMasterRefFilter
	prev_vert_ref: BlockInfoPrevVertRefFilter
}

input BlockValueFlowFilter {
	to_next_blk: CurrencyCollectionFilter
	exported: CurrencyCollectionFilter
	fees_collected: CurrencyCollectionFilter
	created: CurrencyCollectionFilter
	imported: CurrencyCollectionFilter
	from_prev_blk: CurrencyCollectionFilter
	minted: CurrencyCollectionFilter
	fees_imported: CurrencyCollectionFilter
}

input BlockExtraAccountBlocksStateUpdateFilter {
	old_hash: StringFilter
	new_hash: StringFilter
}

input StringArrayFilter {
	any: StringFilter
	all: StringFilter
}

input BlockExtraAccountBlocksFilter {
	account_addr: StringFilter
	transactions: StringArrayFilter
	state_update: BlockExtraAccountBlocksStateUpdateFilter
	tr_count: IntFilter
}

input InMsgArrayFilter {
	any: InMsgFilter
	all: InMsgFilter
}

input OutMsgArrayFilter {
	any: OutMsgFilter
	all: OutMsgFilter
}

input BlockExtraAccountBlocksArrayFilter {
	any: BlockExtraAccountBlocksFilter
	all: BlockExtraAccountBlocksFilter
}

input BlockExtraFilter {
	in_msg_descr: InMsgArrayFilter
	rand_seed: StringFilter
	out_msg_descr: OutMsgArrayFilter
	account_blocks: BlockExtraAccountBlocksArrayFilter
}

input BlockStateUpdateFilter {
	new: StringFilter
	new_hash: StringFilter
	new_depth: IntFilter
	old: StringFilter
	old_hash: StringFilter
	old_depth: IntFilter
}

input BlockFilter {
	id: StringFilter
	status: StringFilter
	global_id: IntFilter
	info: BlockInfoFilter
	value_flow: BlockValueFlowFilter
	extra: BlockExtraFilter
	state_update: BlockStateUpdateFilter
}

input AccountStorageStatUsedFilter {
	cells: IntFilter
	bits: IntFilter
	public_cells: IntFilter
}

input AccountStorageStatFilter {
	used: AccountStorageStatUsedFilter
	last_paid: IntFilter
	due_payment: IntFilter
}

input AccountStorageStateAccountActiveFilter {
	split_depth: IntFilter
	special: TickTockFilter
	code: StringFilter
	data: StringFilter
	library: StringFilter
}

input AccountStorageStateFilter {
	AccountUninit: NoneFilter
	AccountActive: AccountStorageStateAccountActiveFilter
	AccountFrozen: NoneFilter
}

input AccountStorageFilter {
	last_trans_lt: FloatFilter
	balance: CurrencyCollectionFilter
	state: AccountStorageStateFilter
}

input AccountFilter {
	id: StringFilter
	_key: StringFilter
	storage_stat: AccountStorageStatFilter
	storage: AccountStorageFilter
	addr: MsgAddressIntFilter
}

input TransactionStateUpdateFilter {
	old_hash: StringFilter
	new_hash: StringFilter
}

input TrStoragePhaseFilter {
	storage_fees_collected: IntFilter
	storage_fees_due: IntFilter
	status_change: StringFilter
}

input TrCreditPhaseFilter {
	due_fees_collected: IntFilter
	credit: CurrencyCollectionFilter
}

input TrComputePhaseSkippedFilter {
	reason: StringFilter
}

input TrComputePhaseVmFilter {
	success: BooleanFilter
	msg_state_used: BooleanFilter
	account_activated: BooleanFilter
	gas_fees: IntFilter
	gas_used: IntFilter
	gas_limit: IntFilter
	gas_credit: IntFilter
	mode: IntFilter
	exit_code: IntFilter
	exit_arg: IntFilter
	vm_steps: IntFilter
	vm_init_state_hash: StringFilter
	vm_final_state_hash: StringFilter
}

input TrComputePhaseFilter {
	Skipped: TrComputePhaseSkippedFilter
	Vm: TrComputePhaseVmFilter
}

input TrActionPhaseFilter {
	success: BooleanFilter
	valid: BooleanFilter
	no_funds: BooleanFilter
	status_change: StringFilter
	total_fwd_fees: IntFilter
	total_action_fees: IntFilter
	result_code: IntFilter
	result_arg: IntFilter
	tot_actions: IntFilter
	spec_actions: IntFilter
	skipped_actions: IntFilter
	msgs_created: IntFilter
	action_list_hash: StringFilter
	tot_msg_size: StorageUsedShortFilter
}

input TrBouncePhaseNofundsFilter {
	msg_size: StorageUsedShortFilter
	req_fwd_fees: IntFilter
}

input TrBouncePhaseOkFilter {
	msg_size: StorageUsedShortFilter
	msg_fees: IntFilter
	fwd_fees: IntFilter
}

input TrBouncePhaseFilter {
	Negfunds: NoneFilter
	Nofunds: TrBouncePhaseNofundsFilter
	Ok: TrBouncePhaseOkFilter
}

input TransactionDescriptionOrdinaryFilter {
	credit_first: BooleanFilter
	storage_ph: TrStoragePhaseFilter
	credit_ph: TrCreditPhaseFilter
	compute_ph: TrComputePhaseFilter
	action: TrActionPhaseFilter
	aborted: BooleanFilter
	bounce: TrBouncePhaseFilter
	destroyed: BooleanFilter
}

input TransactionDescriptionTickTockFilter {
	tt: StringFilter
	storage: TrStoragePhaseFilter
	compute_ph: TrComputePhaseFilter
	action: TrActionPhaseFilter
	aborted: BooleanFilter
	destroyed: BooleanFilter
}

input TransactionDescriptionSplitPrepareFilter {
	split_info: SplitMergeInfoFilter
	compute_ph: TrComputePhaseFilter
	action: TrActionPhaseFilter
	aborted: BooleanFilter
	destroyed: BooleanFilter
}

input TransactionDescriptionSplitInstallFilter {
	split_info: SplitMergeInfoFilter
	prepare_transaction: StringFilter
	installed: BooleanFilter
}

input TransactionDescriptionMergePrepareFilter {
	split_info: SplitMergeInfoFilter
	storage_ph: TrStoragePhaseFilter
	aborted: BooleanFilter
}

input TransactionDescriptionMergeInstallFilter {
	split_info: SplitMergeInfoFilter
	prepare_transaction: StringFilter
	credit_ph: TrCreditPhaseFilter
	compute_ph: TrComputePhaseFilter
	action: TrActionPhaseFilter
	aborted: BooleanFilter
	destroyed: BooleanFilter
}

input TransactionDescriptionFilter {
	Ordinary: TransactionDescriptionOrdinaryFilter
	Storage: TrStoragePhaseFilter
	TickTock: TransactionDescriptionTickTockFilter
	SplitPrepare: TransactionDescriptionSplitPrepareFilter
	SplitInstall: TransactionDescriptionSplitInstallFilter
	MergePrepare: TransactionDescriptionMergePrepareFilter
	MergeInstall: TransactionDescriptionMergeInstallFilter
}

input MessageArrayFilter {
	any: MessageFilter
	all: MessageFilter
}

input TransactionFilter {
	id: StringFilter
	block_id: StringFilter
	status: StringFilter
	account_addr: StringFilter
	lt: FloatFilter
	last_trans_lt: FloatFilter
	prev_trans_hash: StringFilter
	prev_trans_lt: FloatFilter
	now: IntFilter
	outmsg_cnt: IntFilter
	orig_status: StringFilter
	end_status: StringFilter
	in_msg: StringFilter
	in_message: MessageFilter
	out_msgs: StringArrayFilter
	out_messages: MessageArrayFilter
	total_fees: IntFilter
	state_update: TransactionStateUpdateFilter
	description: TransactionDescriptionFilter
	root_cell: StringFilter
}

enum QueryOrderByDirection {
    ASC
    DESC
}

input QueryOrderBy {
    path: String
    direction: QueryOrderByDirection
}

type Query {
	messages(filter: MessageFilter, orderBy: [QueryOrderBy], limit: Int): [Message]
	blocks(filter: BlockFilter, orderBy: [QueryOrderBy], limit: Int): [Block]
	accounts(filter: AccountFilter, orderBy: [QueryOrderBy], limit: Int): [Account]
	transactions(filter: TransactionFilter, orderBy: [QueryOrderBy], limit: Int): [Transaction]
    select(query: String!, bindVarsJson: String!): String!
}

type Subscription {
	messages(filter: MessageFilter): Message
	blocks(filter: BlockFilter): Block
	accounts(filter: AccountFilter): Account
	transactions(filter: TransactionFilter): Transaction
}
