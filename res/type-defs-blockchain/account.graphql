"""
# Account type

Recall that a smart contract and an account are the same thing in the context
of the Everscale Blockchain, and that these terms can be used interchangeably, at
least as long as only small (or “usual”) smart contracts are considered. A large
smart-contract may employ several accounts lying in different shardchains of
the same workchain for load balancing purposes.

An account is identified by its full address and is completely described by
its state. In other words, there is nothing else in an account apart from its
address and state.
"""
type BlockchainAccount implements Node {
    """
    BlockchainAccount.id is "account/"-prefixed Account.id.
    For id without prefix see "address".
    """
    id: ID!
    address(format: AddressFormat): String
    """
    Returns the current status of the account.

    - 0 – uninit
    - 1 – active
    - 2 – frozen
    - 3 – nonExist
    """
    acc_type: Int
    acc_type_name: AccountStatusEnum
    balance(format: BigIntFormat): String
    balance_other: [OtherCurrency]
    "Contains sum of all the bits used by the cells of the account. Used in storage fee calculation"
    bits(format: BigIntFormat): String
    "Bag of cells with the account struct encoded as base64."
    boc: String
    "Contains number of the cells of the account. Used in storage fee calculation"
    cells(format: BigIntFormat): String
    "If present, contains smart-contract code encoded with in base64."
    code: String
    "`code` field root hash."
    code_hash: String
    "If present, contains smart-contract data encoded with in base64."
    data: String
    "`data` field root hash."
    data_hash: String
    """
    If present, accumulates the storage payments that could not be exacted from
    the balance of the account, represented by a strictly positive amount of nano
    tokens; it can be present only for uninitialized or frozen accounts that have
    a balance of zero Grams (but may have non-zero balances in non gram
    cryptocurrencies). When due_payment becomes larger than the value of a
    configurable parameter of the blockchain, the ac- count is destroyed
    altogether, and its balance, if any, is transferred to the zero account.
    """
    due_payment(format: BigIntFormat): String
    "account 's initial code hash (when it was deployed)"
    init_code_hash: String
    """
    Contains either the unixtime of the most recent storage payment
    collected (usually this is the unixtime of the most recent transaction),
    or the unixtime when the account was created (again, by a transaction).
    """
    last_paid: Float
    last_trans_lt(format: BigIntFormat): String
    "If present, contains library code used in smart-contract."
    library: String
    "`library` field root hash."
    library_hash: String
    prev_code_hash: String
    "Merkle proof that account is a part of shard state it cut from as a bag of cells with Merkle proof struct encoded as base64."
    proof: String
    "Contains the number of public cells of the account. Used in storage fee calculation."
    public_cells(format: BigIntFormat): String
    "Is present and non-zero only in instances of large smart contracts."
    split_depth: Int
    "Contains the representation hash of an instance of `StateInit` when an account is frozen."
    state_hash: String
    """
    May be present only in the masterchain—and within the masterchain, only in some
    fundamental smart contracts required for the whole system to function.
    """
    tick: Boolean
    """
    May be present only in the masterchain—and within the masterchain, only in some
    fundamental smart contracts required for the whole system to function.
    """
    tock: Boolean
    "Workchain id of the account address (id field)."
    workchain_id: Int
}
